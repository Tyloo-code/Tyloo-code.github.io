<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Tyloo-code.github.io</id>
    <title>Tyloo</title>
    <updated>2020-11-30T12:30:27.659Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Tyloo-code.github.io"/>
    <link rel="self" href="https://Tyloo-code.github.io/atom.xml"/>
    <subtitle>知行合一</subtitle>
    <logo>https://Tyloo-code.github.io/images/avatar.png</logo>
    <icon>https://Tyloo-code.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Tyloo</rights>
    <entry>
        <title type="html"><![CDATA[Windows系统下Typora 完全使用详解]]></title>
        <id>https://Tyloo-code.github.io/post/windows-xi-tong-xia-typora-wan-quan-shi-yong-xiang-jie/</id>
        <link href="https://Tyloo-code.github.io/post/windows-xi-tong-xia-typora-wan-quan-shi-yong-xiang-jie/">
        </link>
        <updated>2020-11-30T05:40:48.000Z</updated>
        <content type="html"><![CDATA[<p>最近在用这个软件，亲测确实觉得这个软件比较好用，所以写下这篇文章，分享给大家Typora 是一款极致简洁的 markdown 文本编辑器。 支持即时渲染技术 ，没有编辑工具栏！在快速文字排版以及代码编辑方面的效率是显而易见的，自己感觉比MarkdownPad好用。「它的功能之强大、设计之冷静、体验之美妙、理念之先进，我认为值得所有笔记应用厂商学习。」</p>
<h2 id="邂逅typora">邂逅Typora</h2>
<p><a href="https://www.typora.io/#windows" target="_blank" style="color: orange">初遇Typora</a></p>
<h2 id="typora是什么">Typora是什么？</h2>
<p>Typora 是一款支持实时预览的 Markdown 文本编辑器。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是完全免费的。</p>
<h2 id="一个-markdown-文本编辑器">一个 Markdown 文本编辑器</h2>
<p>Typora 首先是一个 Markdown 文本编辑器，它支持且仅支持 Markdown 语法的文本编辑。在 Typora 官网 上他们将 Typora 描述为 「A truly minimal markdown editor. 」。<br>
<img src="https://Tyloo-code.github.io/post-images/1606715264191.png" alt="官网首页" loading="lazy"><center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">官网首页</center></p>
<h2 id="关于markdown">关于Markdown</h2>
<p>Markdown 是用来编写结构化文档的一种纯文本格式，它使我们在双手不离开键盘的情况下，可以对文本进行一定程度的格式排版。你可以在<a href="https://tyloo-code.github.io/post/markdown-ji-ben-yu-fa/">这篇文章</a>中快速入门 Markdown。</p>
<p>由于目前还没有一个权威机构对 Markdown 的语法进行规范，各应用厂商制作时遵循的 Markdown 语法也是不尽相同的。其中比较受到认可的是<a href="https://Tyloo-code.github.io/post-images/1606715866342.png">GFM标准</a><br>
<img src="https://Tyloo-code.github.io/post-images/1606718544020.png" alt="严格模式" loading="lazy"><center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">严格模式</center></p>
<h2 id="写得舒服">写得舒服</h2>
<p>一个文本编辑器，<strong>写得舒服</strong>是关键。我曾说过，「更有趣的是，一个笔记应用不会因为它支持 Markdown 语法而高级或易用很多。」，细枝末节处的人性化考虑才是最重要的。而 Typora 的编辑体验显然是经过深思熟虑设计的产物。</p>
<p>我认为：一个优秀的笔记应用应该给用户<strong>选择 Markdown 语法风格的权利</strong>。而 Typora 在这一点上是我目前见过所有 Markdown 笔记应用中做得最好的。<br>
<img src="https://Tyloo-code.github.io/post-images/1606718646444.jpg" alt="文本编辑设置" loading="lazy"><center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">文本编辑设置</center><br>
通过打开 文件 - 偏好设置 你会发现 Typora 为编辑体验的考虑细致到了令人叹为观止的程度。Typora 中提供了大量有关 Markdown 偏好的设置，据此，你可以构建一个几乎完全适合自己的 Markdown 编辑器。下面我将依次介绍一些与文本编辑体验有关的功能亮点。</p>
<p>##图片插入<br>
Typora 的图片插入功能是广受好评的。要知道，Markdown 原生不太注重图片插入的功能，但你可以在 Typora 中：</p>
<ul>
<li>直接使用 右键 - 复制 Ctrl + V 将网络图片、剪贴板图片复制到文档中</li>
<li>拖动本地图片到文档中</li>
</ul>
<p>Typora 会自动帮你插入符合 Markdown 语法的图片语句，并给它加上标题。</p>
<p>更强大的是，Typora 支持在拖动或 Ctrl + V 网络图片后自动将其保存到本地。你可以在 文件 - 偏好设置 - 编辑器 - 图片插入 中选择复制到哪个路径，什么情况下需要复制。<br>
<img src="https://Tyloo-code.github.io/post-images/1606719092672.png" alt="" loading="lazy"><center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">图片插入</center></p>
<p>这一功能保证了即使网络图片源失效了，你还有本地的备份可用。同时也能使你的文档文件夹更合理、完整。</p>
<h2 id="打字机模式和专注模式">打字机模式和专注模式</h2>
<p><strong>打字机模式</strong>使得你所编辑的那一行永远处于屏幕正中。<br>
<strong>专注模式</strong>使你正在编辑的那一行保留颜色，而其他行的字体呈灰色。</p>
<p>你可以在 视图 - 专注模式 / 打字机模式 中勾选使用这两个模式。<br>
<img src="https://Tyloo-code.github.io/post-images/1606720738399.gif" alt="" loading="lazy"></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">两种模式</center> 
<h2 id="实时预览">实时预览</h2>
<p>我想很果断地下这个结论：到现在还不支持编辑界面实时预览的 Markdown 编辑器基本可以退出市场了。Typora 在这一方面显然已经领先了一大步——他们连 Markdown 语法的标记都在实时预览中消去了。当你离开正在编辑的有格式的文本段后，Typora 会自动隐藏 Markdown 标记，只留下 <strong>所见即所得</strong> 的美妙。他们把这称为<em>Hybrid View</em> 。<br>
<img src="https://Tyloo-code.github.io/post-images/1606721116860.gif" alt="" loading="lazy"></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">所见即所得</center> 
<p>为了防止一些程序 bug 的发生（虽然在我使用下来感到是很少的）导致格式问题无法修改，Typora 保留了一个「源代码模式」。你可以通过 视图 - 源代码模式 或左下角的 &lt;/&gt; 按钮进入。<br>
<img src="https://Tyloo-code.github.io/post-images/1606721181434.gif" alt="" loading="lazy"></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">源代码模式</center> 
<h2 id="大纲-文件侧边栏">大纲 / 文件侧边栏</h2>
<figure data-type="image" tabindex="1"><img src="https://Tyloo-code.github.io/post-images/1606721243748.png" alt="" loading="lazy"></figure>
<center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">侧边栏</center> 
<p>Typora 会根据你 Markdown 标记的 H1、H2、H3…… 各级标题为你呈现一个大纲。</p>
<p>你也可以选择查看文件夹中的文件，但由于目前 Typora 只支持查看 md 文件，因此我认为文件侧边栏这个功能还是很鸡肋的。</p>
<h2 id="空格与换行">空格与换行</h2>
<p>Typora 在空格与换行部分主要是使用 <a href="https://commonmark.org">CommonMark</a> 作为标注规范。与前文提到的 GFM 一样，CommonMark 也是比较流行的 Markdown 语言规范（解析器）之一。</p>
<ul>
<li><strong>空格：</strong><br>
在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。<br>
你可以在源代码模式下，为每个空格前加一个 \ 转义符，或者直接使用 HTML 风格的 &amp;nbps; 来保持连续的空格。</li>
<li><strong>软换行：</strong><br>
需要说明的是，在 Markdown 语法中，换行（line break）与换段是不同的。且换行分为软换行和硬换行。在 Typora 中，你可以通过 Shift + Enter 完成一次软换行。软换行只在编辑界面可见，当文档被导出时换行会被省略。</li>
<li><strong>硬换行：</strong><br>
你可以通过 空格 + 空格 + Shift + Enter 完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</li>
<li><strong>换段：</strong><br>
你可以通过 Enter 完成一次换段。Typora 会自动帮你完成两次 Shift + Enter 的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。</li>
<li><strong>Windows 风格（CR+LF）与 Unix 风格（CR）的换行符：</strong><br>
CR 表示回车 \r ，即回到一行的开头，而 LF 表示换行 \n ，即另起一行。<br>
所以 Windows 风格的换行符本质是「回车 + 换行」，而 Unix 风格的换行符是「换行」。这也是为什么 Unix / Mac 系统下的文件，如果在 Windows 系统直接打开会全部在同一行内。 你可以在 文件 - 偏好设置 - 编辑器 - 默认换行符 中对此进行切换。</li>
</ul>
<p>下附以上各空格、换行、换段的测试结果图。具体内容你可以在官网的 <a href="http://support.typora.io/Line-Break/">这篇文档</a> 中查阅。<br>
<img src="https://Tyloo-code.github.io/post-images/1606722389444.png" alt="" loading="lazy"></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">空格、换行、换段</center> 
<h2 id="一个学术文档编辑器">一个学术文档编辑器</h2>
<p>除了基本的文本编辑体验极佳之外，Typora 还是一个非常优秀的学术文档编辑器。当然作为一个轻量级的、基于 Markdown 的编辑器，它不能与那些 LaTeX 编辑器相提并论，但它仍支持了许多可用于学术写作的功能。</p>
<p><strong>LaTeX</strong></p>
<blockquote>
<p>LaTeX 是一种基于 TeX 的排版系统，由于它易于快速生成复杂表格和数学公式，非常适用于生成高印刷质量的科技和数学类文档。如果你常阅读数学、计算机等领域的学术论文，你一定对 LaTeX 不陌生。</p>
</blockquote>
<p>Typora 原生支持 LaTeX 语法，你有两种方式输入 LaTeX 风格的数学公式：</p>
<ol>
<li><strong>行内公式（inline）：</strong> 用 $...$ 括起公式，公式会出现在行内。</li>
<li><strong>块间公式（display）：</strong> 用 $$...$$ 括起公式（注意 $$ 后需要换行），公式会默认显示在行中间。</li>
</ol>
<p>具体的 LaTeX 语法在此不赘述了，你可以在 <a href="https://blog.csdn.net/happyday_d/article/details/83715440">这篇文章</a> 中查看。</p>
<h2 id="代码高亮">代码高亮</h2>
<p>Typora 中代码的插入也可以分为行内和块间两种：</p>
<ol>
<li>行内代码：用`...` 或``...`` 括起代码，代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</li>
<li>代码块：输入 ``` 后并输入语言名，换行，开始写代码，Typora 就会自动帮你实现代码高亮。Typora 原生支持许多编程语言代码块的语法高亮，基本日常常用的编程语言它都能很好地支持。<br>
除此以外，你也可以直接换行开始写，而后再选择语言。</li>
</ol>
<h2 id="链接引用与脚注">链接引用与脚注</h2>
<p><strong>链接引用</strong>类似于我们常在论文末尾看到的「参考文献」的写法，你可以通过 []: 的语法来为你的文档加上链接引用。<br>
<strong>脚注</strong>在少数派的文章中也很常见，即某段话结尾右上角标有数字标记，页面底部进行注释的写法。你可以在需要插入脚注标号的位置写 [^ number ] ，再在下方通过 [^ number ]: 在文档中插入脚注。注意不要遗漏了脚注编号 number 前后的空格。<br>
<img src="https://Tyloo-code.github.io/post-images/1606723891564.png" alt="" loading="lazy"></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">链接引用和脚注
</center> 
<h2 id="一个伪装成文本编辑器的浏览器">一个伪装成文本编辑器的浏览器</h2>
<p>当我的一个朋友问我「Typora 有什么好写的？」时，我回答「Typora 是一个伪装成文本编辑器的浏览器」。是的，事实上如果你有一定的计算机基础，你可以找到许多有关于「Typora 其实是一个浏览器」的蛛丝马迹。<br>
<img src="https://Tyloo-code.github.io/post-images/1606724542832.png" alt="" loading="lazy"><center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">图片插入</p>
</center> 
<p>在图片插入的选项中，Typora 用了「复制图片到 ./${filename}.assets 文件夹」的说法，而这其实是网页前端常用的 Javascript 字符串模板语法的风格。</p>
<p>再比如，Typora 将更遵循 GFM 标准的 Markdown 语法模式称为「严格模式 Strict Mode」，这一说法常见于 HTML 和 JavaScript 编程中。类似「源代码模式」的说法也是同理。</p>
<p>当然，最明显的一点是当你按下 Shift + F12 快捷键时，页面会弹出一个基于 Chrome 的开发者工具栏，也就是我们在浏览器中常说的「审查元素」。<img src="https://Tyloo-code.github.io/post-images/1606724640253.png" alt="" loading="lazy"><center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">审查元素</p>
</center> 
<h2 id="伪装从何而来">伪装从何而来？</h2>
<p>当我们把视角放在「Typora 是一个支持 Markdown 语言的文本编辑器」的出发点来考虑这个问题，一切就都显得很明白了。</p>
<p>John Gruber 在 2004 年用 Perl 创造了 Markdown 语言，这个语言的目的是希望大家使用「易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的 XHTML（或是 HTML）」。也就是说，<strong>在 Markdown 诞生之初，它就是为了被浏览器阅读而设计的。</strong></p>
<p>我们在用 Markdown 语言撰写文稿的时候，其实本质上是在借助某种编程语言的转化（解析器）来编写一个 HTML 网页。Markdown 从它诞生之初就与 Web 技术有着及其紧密的联系。</p>
<p>如果我说，我们每一篇文稿都是一个网页，那就很好理解了。Typora 利用解析器先将我们写的 Markdown 文档解析成为 HTML 文档，再为它嵌入一个 CSS 样式，最后再加上可能需要的脚本等。</p>
<h2 id="html">HTML</h2>
<p>HTML 是一种标记语言，主要负责构成网页的骨架，它包含所有不加装饰的网页元素。在 Typora 的使用场景下则是所有的<strong>文本、段落、标题等</strong>的记号。</p>
<p>你可以把一张网页想象成一幅数字油画，HTML 就是那个黑白线条的底，上面写满了数字标记，示意你哪一块区域要涂什么颜色。而 CSS 则负责在对应的区域涂上颜色，甚至加上一些装饰等。<br>
<img src="https://Tyloo-code.github.io/post-images/1606724955000.jpg" alt="" loading="lazy"></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">数字油画
</center> 
<h3 id="html-标签">HTML 标签</h3>
<p>Typora 支持许多常用的 HTML 标签，如果你了解 HTML 语法的话，你可以写出十分美观丰富的文档页面。<br>
<img src="https://Tyloo-code.github.io/post-images/1606725029628.png" alt="" loading="lazy"></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">HTML 标签
</center> 
<p>事实上你可以在 Typora 中完成许多基本的 HTML 风格的文本输入，例如 HTML 字符、HTML 块、HTML 风格的注释，甚至是视频和音频。具体支持的功能和限制请在 <a href="http://support.typora.io/HTML/">官方文档</a> 中查阅。</p>
<h3 id="导出为-html">导出为 HTML</h3>
<p>有了这一功能，我们就可以在 Typora 中创造出远超普通 Markdown 文档的页面效果。</p>
<p>Typora 原生支持将文档导出为 HTML 格式的文件，并选择是否要嵌入 style（也就是后文我将提到的 CSS 的部分）。</p>
<p>除此之外，由于其本身「浏览器」的属性，你可以直接在实时预览界面用 Ctrl +C 复制到 HTML 代码。一个实用的用处是将这些 HTML 代码直接 Ctrl + V 黏贴到微信公众号后台，基本可以保证两边显示效果相同。这一点不仅使公众号推送可以有更自由、美观的样式，也让编辑、排版更轻松了。（由于微信自带浏览器的一些特性，可能有少部分 CSS style 不能生效，建议多多校对。）<br>
<img src="https://Tyloo-code.github.io/post-images/1606725222158.png" alt="" loading="lazy"></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">公众号
</center> 
<p>具体如何用 Typora 完成公众号写作，你可以在 <a href="https://sspai.com/post/40524">这篇文章</a> 中进一步了解。</p>
<h2 id="css">CSS</h2>
<p>为了让文档更美观，我们可以为其加上 CSS style。我认为 Typora 对 CSS 的支持让它成为一众桌面笔记应用中最与众不同的一个。在 Typora 中 CSS 被称为「主题」，但其本质仍是 CSS 文件。你可以在 文件 - 偏好设置 - 主题 - 打开主题文件夹 看到这些 CSS 文件。<br>
<img src="https://Tyloo-code.github.io/post-images/1606725328223.png" alt="" loading="lazy"><center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">主题</p>
</center> 
<figure data-type="image" tabindex="2"><img src="https://Tyloo-code.github.io/post-images/1606725342168.png" alt="" loading="lazy"></figure>
<center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">主题文件夹
</center> 
<p>选择不同的主题可以使文档拥有不同的外观，但不会影响内容。Typora 自带了若干主题，你也可以在 <a href="http://theme.typora.io">官网</a> 下载更多的主题。<br>
<img src="https://Tyloo-code.github.io/post-images/1606725423540.png" alt="" loading="lazy"></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">主题商店
</center> 
<p>除此以外，如果你有一定的 Web 编程基础，你当然也可以自己修改、新建适合你使用需求的 CSS 文件。我自己就写了一份名为 WeChat 的 CSS 文件，来符合我公众号特定的排版需求，例如正文是 15px，页边距是 8，小标题是 18px 等等。<br>
<img src="https://Tyloo-code.github.io/post-images/1606725495732.png" alt="" loading="lazy"></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">CSS文件
</center> 
<p>使用 Typora 的「主题」功能写公众号的一个好处是，只需要每次都套用同样的主题，我们就可以在保证每次排版规范都相同的同时，节省许多重复的工作。</p>
<h2 id="yaml-front-matter">YAML front-matter</h2>
<p>Typora 支持在文档头部加上基于 YAML 的 front-matter 信息，这一特性适用于把 Markdown 文档分类归档上传到用 Hexo 框架搭建的博客中。我对于这一点不太了解，这里就不误导大家了。有所了解的朋友可以在评论区谈谈！</p>
<h2 id="写在最后">写在最后</h2>
<p>因为移动端生产效率低，所以只有桌面端应用。因为左顾右盼的两栏式预览影响思路，所以他们甚至去掉了 Markdown 语法标记，只留下最终呈现的样式。因为 Markdown 是为了 HTML 呈现而设计的，所以他们提供了从入门到高级的一系列 Web 辅助功能…… 这一切都只是为了纯粹的<strong>生产效率</strong>。如果我们回头想想，Markdown 语言本身，当初不也是为了高效地生成简单网页而诞生的吗？</p>
<p>最后，让我们一起期待这款<strong>顶级桌面文本生产力工具</strong>的正式版的到来吧！😆</p>
<p>文章转自：https://sspai.com/post/54912</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown基本语法]]></title>
        <id>https://Tyloo-code.github.io/post/markdown-ji-ben-yu-fa/</id>
        <link href="https://Tyloo-code.github.io/post/markdown-ji-ben-yu-fa/">
        </link>
        <updated>2020-11-30T02:09:55.000Z</updated>
        <content type="html"><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<p><strong>优点：</strong><br>
1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>
2、操作简单。添加标题时Markdown只需要在标题内容前加#即可<br>
<strong>缺点：</strong><br>
1、需要记一些语法（当然，是很简单。五分钟学会）。<br>
2、有些平台不支持Markdown编辑模式。</p>
<h1 id="一-标题">一、标题</h1>
<p>在想要设置为标题的文字前面加#来表示<br>
一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>
<p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p>
<p>示例：<br>
<img src="https://Tyloo-code.github.io/post-images/1606703470701.png" alt="" loading="lazy"></p>
<p>效果如下：</p>
<h1 id="这是一级标题">这是一级标题</h1>
<h2 id="这是二级标题">这是二级标题</h2>
<h3 id="这是三级标题">这是三级标题</h3>
<h4 id="这是四级标题">这是四级标题</h4>
<h5 id="这是五级标题">这是五级标题</h5>
<h6 id="这是六级标题">这是六级标题</h6>
<h1 id="二-字体">二、字体</h1>
<h3 id="加粗">加粗</h3>
<p>要加粗的文字左右分别用两个*号包起来</p>
<h3 id="斜体">斜体</h3>
<p>要倾斜的文字左右分别用一个*号包起来</p>
<h3 id="斜体加粗">斜体加粗</h3>
<p>要倾斜和加粗的文字左右分别用三个*号包起来</p>
<h3 id="删除线">删除线</h3>
<p>要加删除线的文字左右分别用两个~~号包起来</p>
<p>示例：<br>
<img src="https://Tyloo-code.github.io/post-images/1606703939197.png" alt="" loading="lazy"></p>
<p>效果如下：<br>
<strong>这是加粗的文字</strong><br>
<em>这是倾斜的文字</em>`<br>
<em><strong>这是斜体加粗的文字</strong></em><br>
<s>这是加删除线的文字</s></p>
<h1 id="三-引用">三、引用</h1>
<p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个...</p>
<p>示例：<br>
<img src="https://Tyloo-code.github.io/post-images/1606704234954.png" alt="" loading="lazy"></p>
<p>效果如下：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h1 id="四-分割线">四、分割线</h1>
<p>三个或者三个以上的 - 或者 * 都可以。</p>
<p>示例：<br>
<img src="https://Tyloo-code.github.io/post-images/1606704462750.png" alt="" loading="lazy"></p>
<h2 id="效果如下">效果如下：</h2>
<hr>
<hr>
<hr>
<h1 id="五-图片">五、图片</h1>
<p>语法：![图片alt](图片地址 ''图片title'')<br>
图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>
图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p>
<p>示例：<br>
<img src="https://Tyloo-code.github.io/post-images/1606704900357.png" alt="" loading="lazy">![]</p>
<p>效果如下：<br>
<img src="https://Tyloo-code.github.io/post-images/1606717141216.svg" alt="" loading="lazy"></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:null;padding-bottom:4px">Gridea-Markdown</center> 
<p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p>
<p>markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。</p>
<h1 id="六-超链接">六、超链接</h1>
<p>语法：<br>
<img src="https://Tyloo-code.github.io/post-images/1606708259670.png" alt="" loading="lazy"></p>
<p>示例：<br>
<img src="https://Tyloo-code.github.io/post-images/1606708357274.png" alt="" loading="lazy"></p>
<p>效果如下：<br>
<a href="http://jianshu.com">简书</a><br>
<a href="http://baidu.com">百度</a></p>
<p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p>
<figure data-type="image" tabindex="1"><img src="https://Tyloo-code.github.io/post-images/1606708441292.png" alt="" loading="lazy"></figure>
<h1 id="七-列表">七、列表</h1>
<h3 id="无序列表">无序列表</h3>
<p>语法：<br>
无序列表用 - + * 任何一种都可以</p>
<p>示例：<br>
<img src="https://Tyloo-code.github.io/post-images/1606709101155.png" alt="" loading="lazy"></p>
<p>效果如下：</p>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<h3 id="有序列表">有序列表</h3>
<p>语法：<br>
数字加点</p>
<p>示例：<br>
<img src="https://Tyloo-code.github.io/post-images/1606709243091.png" alt="" loading="lazy"></p>
<p>效果如下：</p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<h3 id="列表嵌套">列表嵌套</h3>
<h4 id="上一级和下一级之间敲三个空格即可">上一级和下一级之间敲三个空格即可</h4>
<figure data-type="image" tabindex="2"><img src="https://Tyloo-code.github.io/post-images/1606709356169.png" alt="" loading="lazy"></figure>
<h1 id="八-表格">八、表格</h1>
<p>语法：<br>
<img src="https://Tyloo-code.github.io/post-images/1606709722229.png" alt="" loading="lazy"></p>
<p>示例：<br>
<img src="https://Tyloo-code.github.io/post-images/1606709789868.png" alt="" loading="lazy"></p>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th style="text-align:center">技能</th>
<th style="text-align:right">排行</th>
</tr>
</thead>
<tbody>
<tr>
<td>刘备</td>
<td style="text-align:center">哭</td>
<td style="text-align:right">大哥</td>
</tr>
<tr>
<td>关羽</td>
<td style="text-align:center">打</td>
<td style="text-align:right">二哥</td>
</tr>
<tr>
<td>张飞</td>
<td style="text-align:center">骂</td>
<td style="text-align:right">三弟</td>
</tr>
</tbody>
</table>
<h1 id="九-代码">九、代码</h1>
<p>语法：<br>
单行代码：代码之间分别用一个反引号包起来<br>
<img src="https://Tyloo-code.github.io/post-images/1606709967461.png" alt="" loading="lazy"><br>
代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行<br>
<img src="https://Tyloo-code.github.io/post-images/1606709977762.png" alt="" loading="lazy"><br>
注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>
<p>示例：<br>
单行代码<br>
<img src="https://Tyloo-code.github.io/post-images/1606710064570.png" alt="" loading="lazy"></p>
<p>代码块<br>
<img src="https://Tyloo-code.github.io/post-images/1606710077370.png" alt="" loading="lazy"></p>
<p>效果如下：<br>
<code>create database hero;</code></p>
<pre><code>    function fun(){
         echo &quot;这是一句非常牛逼的代码&quot;;
    }
    fun();
</code></pre>
<h1 id="十-流程图">十、流程图</h1>
<p>示例：</p>
<pre><code class="language-flow">st=&gt;start: 开始
op=&gt;operation: My Operation
cond=&gt;condition: Yes or No?
e=&gt;end
st-&gt;op-&gt;cond
cond(yes)-&gt;e
cond(no)-&gt;op
</code></pre>
<p>效果如下：<br>
<img src="https://Tyloo-code.github.io/post-images/1606710630750.png" alt="" loading="lazy"></p>
<p>文章转自：https://www.jianshu.com/p/191d1e21f7ed</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HelloWorld]]></title>
        <id>https://Tyloo-code.github.io/post/helloworld/</id>
        <link href="https://Tyloo-code.github.io/post/helloworld/">
        </link>
        <updated>2020-11-29T14:23:07.000Z</updated>
        <summary type="html"><![CDATA[<p>与Gridea的初次邂逅!😘<br>
<img src="https://Tyloo-code.github.io/post-images/1606659885219.jpg" alt="" loading="lazy"></p>
]]></summary>
        <content type="html"><![CDATA[<p>与Gridea的初次邂逅!😘<br>
<img src="https://Tyloo-code.github.io/post-images/1606659885219.jpg" alt="" loading="lazy"></p>
<!-- more -->
<p>Gridea 是一款麻雀虽小却五脏俱全的静态博客写作客户端，他能让你告别繁琐的 Git 操作，更加快速方便的管理你的个人 Blog，同时 Gridea 恰到好处的主题和实用的配置功能也能一定程度上帮助你美化 Blog，如果你的动手能力够强，甚至可以自己调教。作为一款免费的工具，如果你有任何的建议都可以去官方项目页面进行反馈，根据目前的版本迭代速度看，作者还是非常勤劳的，期待未来有更多的新鲜功能。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Tyloo-code.github.io/post/hello-gridea/</id>
        <link href="https://Tyloo-code.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>