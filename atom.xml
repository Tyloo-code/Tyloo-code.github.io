<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Tyloo-code.github.io</id>
    <title>Tyloo</title>
    <updated>2020-12-12T12:06:53.296Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Tyloo-code.github.io"/>
    <link rel="self" href="https://Tyloo-code.github.io/atom.xml"/>
    <subtitle>知行合一</subtitle>
    <logo>https://Tyloo-code.github.io/images/avatar.png</logo>
    <icon>https://Tyloo-code.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Tyloo</rights>
    <entry>
        <title type="html"><![CDATA[ECMAScript 6-11]]></title>
        <id>https://Tyloo-code.github.io/post/ecmascript-6-11/</id>
        <link href="https://Tyloo-code.github.io/post/ecmascript-6-11/">
        </link>
        <updated>2020-12-12T09:07:54.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="第-1-章-ecmasript-相关介绍">第 1 章 ECMASript 相关介绍</h1>
<h2 id="11什么是-ecma">1.1.什么是 ECMA</h2>
<figure data-type="image" tabindex="1"><img src="https://Tyloo-code.github.io/post-images/1607764166027.png" alt="ECMA" loading="lazy"></figure>
<p>ECMA（European Computer Manufacturers Association）中文名称为欧洲计算机制造商协会，这个组织的目标是评估、开发和认可电信和计算机标准。1994 年后该组织改名为 Ecma 国际。</p>
<h2 id="12什么是-ecmascript">1.2.什么是 ECMAScript</h2>
<p>ECMAScript 是由 Ecma 国际通过 ECMA-262 标准化的脚本程序设计语言。</p>
<h2 id="13什么是-ecma-262">1.3.什么是 ECMA-262</h2>
<p>Ecma 国际制定了许多标准，而 ECMA-262 只是其中的一个，所有标准列表查看<br>
<a href="http://www.ecma-international.org/publications/standards/Standard.htm">http://www.ecma-international.org/publications/standards/Standard.htm</a></p>
<h2 id="14ecma-262-历史">1.4.ECMA-262 历史</h2>
<p>ECMA-262（ECMAScript）历史版本查看网址<br>
<a href="http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm">http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm</a><br>
<img src="https://Tyloo-code.github.io/post-images/1607764588998.png" alt="" loading="lazy"></p>
<div style="color:red"> 注：从 ES6 开始，每年发布一个版本，版本号比年份最后一位大 1</div>
<br>
<h2 id="15谁在维护-ecma-262">1.5.谁在维护 ECMA-262</h2>
<p>TC39（Technical Committee 39）是推进 ECMAScript 发展的委员会。其会员都是公司（其中主要是浏览器厂商，有苹果、谷歌、微软、因特尔等）。TC39 定期召开会议，会议由会员公司的代表与特邀专家出席。</p>
<h2 id="16为什么要学习-es6">1.6.为什么要学习 ES6</h2>
<ul>
<li>ES6 的版本变动内容最多，具有里程碑意义</li>
<li>ES6 加入许多新的语法特性，编程实现更简单、高效</li>
<li>ES6 是前端发展趋势，就业必备技能</li>
</ul>
<h2 id="17es6-兼容性">1.7.ES6 兼容性</h2>
<p><a href="http://kangax.github.io/compat-table/es6/">可查看兼容性</a></p>
<h1 id="第-2-章-ecmasript-6-新特性">第 2 章 ECMASript 6 新特性</h1>
<h2 id="21let-关键字">2.1.let 关键字</h2>
<p>let 关键字用来声明变量，使用 let 声明的变量有几个特点：</p>
<ol>
<li>不允许重复声明</li>
<li>块儿级作用域</li>
<li>不存在变量提升</li>
<li>不影响作用域链</li>
</ol>
<div style="color:red"> 应用场景：以后声明变量使用 let 就对了</div>
<br>
<h2 id="22-const-关键字">2.2. const 关键字</h2>
<p>const 关键字用来声明常量，const 声明有以下特点</p>
<ol>
<li>声明必须赋初始值</li>
<li>标识符一般为大写</li>
<li>不允许重复声明</li>
<li>值不允许修改</li>
<li>块儿级作用域</li>
</ol>
<div style="color:red"> 注意: 对象属性修改和数组元素变化不会出发 const 错误</div>
<div style="color:red"> 应用场景：声明对象类型使用 const，非对象类型声明选择 let</div>
<br>
<h2 id="23变量的解构赋值">2.3.变量的解构赋值</h2>
<p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。</p>
<pre><code>//数组的解构赋值
const arr = ['张学友', '刘德华', '黎明', '郭富城'];
let [zhang, liu, li, guo] = arr;
</code></pre>
<pre><code>//对象的解构赋值
const lin = {
 name: '林志颖',
 tags: ['车手', '歌手', '小旋风', '演员']
};
let {name, tags} = lin;
//复杂解构
let wangfei = {
 name: '王菲',
 age: 18,
 songs: ['红豆', '流年', '暧昧', '传奇'],
 history: [
 {name: '窦唯'},
 {name: '李亚鹏'},
 {name: '谢霆锋'}
 ]
};
let {songs: [one, two, three], history: [first, second, third]} = 
wangfei;
</code></pre>
<div style="color:red">注意：频繁使用对象方法、数组元素，就可以使用解构赋值形式</div>
<br>
<h2 id="24模板字符串">2.4.模板字符串</h2>
<p>模板字符串（template string）是增强版的字符串，用反引号（`）标识，特点：</p>
<ol>
<li>字符串中可以出现换行符</li>
<li>可以使用 ${xxx} 形式输出变量</li>
</ol>
<pre><code>// 定义字符串
let str = `&lt;ul&gt;
&lt;li&gt;沈腾&lt;/li&gt;
 &lt;li&gt;玛丽&lt;/li&gt;
 &lt;li&gt;魏翔&lt;/li&gt;
 &lt;li&gt;艾伦&lt;/li&gt;
 &lt;/ul&gt;`;
// 变量拼接
let star = '王宁';
let result = `${star}在前几年离开了开心麻花`;
</code></pre>
<div style="color:red">注意：当遇到字符串与变量拼接的情况使用模板字符串</div>
<br>
<h2 id="25简化对象写法">2.5.简化对象写法</h2>
<p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p>
<pre><code>let name = '尚硅谷';
let slogon = '永远追求行业更高标准';
let improve = function () {
 console.log('可以提高你的技能');
}
//属性和方法简写
let atguigu = {
 name,
 slogon,
 improve,
 change() {
 console.log('可以改变你')
 }
};
</code></pre>
<div style="color:red">注意：对象简写形式简化了代码，所以以后用简写就对了</div>
<br>
<h2 id="26箭头函数">2.6.箭头函数</h2>
<p>ES6 允许使用「箭头」（=&gt;）定义函数。</p>
<pre><code>/**
* 1. 通用写法
*/
let fn = (arg1, arg2, arg3) =&gt; {
 return arg1 + arg2 + arg3;
}
</code></pre>
<p>箭头函数的注意点:</p>
<ol>
<li>如果形参只有一个，则小括号可以省略</li>
<li>函数体如果只有一条语句，则花括号可以省略，函数的返回值为该条语句的<br>
执行结果</li>
<li>箭头函数 this 指向声明时所在作用域下 this 的值</li>
<li>箭头函数不能作为构造函数实例化</li>
<li>不能使用 arguments</li>
</ol>
<pre><code>/**
* 2. 省略小括号的情况
*/
let fn2 = num =&gt; {
 return num * 10;
};
/**
* 3. 省略花括号的情况
*/
let fn3 = score =&gt; score * 20;
/**
* 4. this 指向声明时所在作用域中 this 的值
*/
let fn4 = () =&gt; {
 console.log(this);
}
let school = {
 name: '尚硅谷',
 getName(){
 let fn5 = () =&gt; {
 console.log(this);
 }
 fn5();
 }
};
</code></pre>
<div style="color:red">注意：箭头函数不会更改 this 指向，用来指定回调函数会非常合适</div>
<br>
]]></summary>
        <content type="html"><![CDATA[<h1 id="第-1-章-ecmasript-相关介绍">第 1 章 ECMASript 相关介绍</h1>
<h2 id="11什么是-ecma">1.1.什么是 ECMA</h2>
<figure data-type="image" tabindex="1"><img src="https://Tyloo-code.github.io/post-images/1607764166027.png" alt="ECMA" loading="lazy"></figure>
<p>ECMA（European Computer Manufacturers Association）中文名称为欧洲计算机制造商协会，这个组织的目标是评估、开发和认可电信和计算机标准。1994 年后该组织改名为 Ecma 国际。</p>
<h2 id="12什么是-ecmascript">1.2.什么是 ECMAScript</h2>
<p>ECMAScript 是由 Ecma 国际通过 ECMA-262 标准化的脚本程序设计语言。</p>
<h2 id="13什么是-ecma-262">1.3.什么是 ECMA-262</h2>
<p>Ecma 国际制定了许多标准，而 ECMA-262 只是其中的一个，所有标准列表查看<br>
<a href="http://www.ecma-international.org/publications/standards/Standard.htm">http://www.ecma-international.org/publications/standards/Standard.htm</a></p>
<h2 id="14ecma-262-历史">1.4.ECMA-262 历史</h2>
<p>ECMA-262（ECMAScript）历史版本查看网址<br>
<a href="http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm">http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm</a><br>
<img src="https://Tyloo-code.github.io/post-images/1607764588998.png" alt="" loading="lazy"></p>
<div style="color:red"> 注：从 ES6 开始，每年发布一个版本，版本号比年份最后一位大 1</div>
<br>
<h2 id="15谁在维护-ecma-262">1.5.谁在维护 ECMA-262</h2>
<p>TC39（Technical Committee 39）是推进 ECMAScript 发展的委员会。其会员都是公司（其中主要是浏览器厂商，有苹果、谷歌、微软、因特尔等）。TC39 定期召开会议，会议由会员公司的代表与特邀专家出席。</p>
<h2 id="16为什么要学习-es6">1.6.为什么要学习 ES6</h2>
<ul>
<li>ES6 的版本变动内容最多，具有里程碑意义</li>
<li>ES6 加入许多新的语法特性，编程实现更简单、高效</li>
<li>ES6 是前端发展趋势，就业必备技能</li>
</ul>
<h2 id="17es6-兼容性">1.7.ES6 兼容性</h2>
<p><a href="http://kangax.github.io/compat-table/es6/">可查看兼容性</a></p>
<h1 id="第-2-章-ecmasript-6-新特性">第 2 章 ECMASript 6 新特性</h1>
<h2 id="21let-关键字">2.1.let 关键字</h2>
<p>let 关键字用来声明变量，使用 let 声明的变量有几个特点：</p>
<ol>
<li>不允许重复声明</li>
<li>块儿级作用域</li>
<li>不存在变量提升</li>
<li>不影响作用域链</li>
</ol>
<div style="color:red"> 应用场景：以后声明变量使用 let 就对了</div>
<br>
<h2 id="22-const-关键字">2.2. const 关键字</h2>
<p>const 关键字用来声明常量，const 声明有以下特点</p>
<ol>
<li>声明必须赋初始值</li>
<li>标识符一般为大写</li>
<li>不允许重复声明</li>
<li>值不允许修改</li>
<li>块儿级作用域</li>
</ol>
<div style="color:red"> 注意: 对象属性修改和数组元素变化不会出发 const 错误</div>
<div style="color:red"> 应用场景：声明对象类型使用 const，非对象类型声明选择 let</div>
<br>
<h2 id="23变量的解构赋值">2.3.变量的解构赋值</h2>
<p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。</p>
<pre><code>//数组的解构赋值
const arr = ['张学友', '刘德华', '黎明', '郭富城'];
let [zhang, liu, li, guo] = arr;
</code></pre>
<pre><code>//对象的解构赋值
const lin = {
 name: '林志颖',
 tags: ['车手', '歌手', '小旋风', '演员']
};
let {name, tags} = lin;
//复杂解构
let wangfei = {
 name: '王菲',
 age: 18,
 songs: ['红豆', '流年', '暧昧', '传奇'],
 history: [
 {name: '窦唯'},
 {name: '李亚鹏'},
 {name: '谢霆锋'}
 ]
};
let {songs: [one, two, three], history: [first, second, third]} = 
wangfei;
</code></pre>
<div style="color:red">注意：频繁使用对象方法、数组元素，就可以使用解构赋值形式</div>
<br>
<h2 id="24模板字符串">2.4.模板字符串</h2>
<p>模板字符串（template string）是增强版的字符串，用反引号（`）标识，特点：</p>
<ol>
<li>字符串中可以出现换行符</li>
<li>可以使用 ${xxx} 形式输出变量</li>
</ol>
<pre><code>// 定义字符串
let str = `&lt;ul&gt;
&lt;li&gt;沈腾&lt;/li&gt;
 &lt;li&gt;玛丽&lt;/li&gt;
 &lt;li&gt;魏翔&lt;/li&gt;
 &lt;li&gt;艾伦&lt;/li&gt;
 &lt;/ul&gt;`;
// 变量拼接
let star = '王宁';
let result = `${star}在前几年离开了开心麻花`;
</code></pre>
<div style="color:red">注意：当遇到字符串与变量拼接的情况使用模板字符串</div>
<br>
<h2 id="25简化对象写法">2.5.简化对象写法</h2>
<p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p>
<pre><code>let name = '尚硅谷';
let slogon = '永远追求行业更高标准';
let improve = function () {
 console.log('可以提高你的技能');
}
//属性和方法简写
let atguigu = {
 name,
 slogon,
 improve,
 change() {
 console.log('可以改变你')
 }
};
</code></pre>
<div style="color:red">注意：对象简写形式简化了代码，所以以后用简写就对了</div>
<br>
<h2 id="26箭头函数">2.6.箭头函数</h2>
<p>ES6 允许使用「箭头」（=&gt;）定义函数。</p>
<pre><code>/**
* 1. 通用写法
*/
let fn = (arg1, arg2, arg3) =&gt; {
 return arg1 + arg2 + arg3;
}
</code></pre>
<p>箭头函数的注意点:</p>
<ol>
<li>如果形参只有一个，则小括号可以省略</li>
<li>函数体如果只有一条语句，则花括号可以省略，函数的返回值为该条语句的<br>
执行结果</li>
<li>箭头函数 this 指向声明时所在作用域下 this 的值</li>
<li>箭头函数不能作为构造函数实例化</li>
<li>不能使用 arguments</li>
</ol>
<pre><code>/**
* 2. 省略小括号的情况
*/
let fn2 = num =&gt; {
 return num * 10;
};
/**
* 3. 省略花括号的情况
*/
let fn3 = score =&gt; score * 20;
/**
* 4. this 指向声明时所在作用域中 this 的值
*/
let fn4 = () =&gt; {
 console.log(this);
}
let school = {
 name: '尚硅谷',
 getName(){
 let fn5 = () =&gt; {
 console.log(this);
 }
 fn5();
 }
};
</code></pre>
<div style="color:red">注意：箭头函数不会更改 this 指向，用来指定回调函数会非常合适</div>
<br>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Element UI 实战教程]]></title>
        <id>https://Tyloo-code.github.io/post/ce-shi/</id>
        <link href="https://Tyloo-code.github.io/post/ce-shi/">
        </link>
        <updated>2020-12-03T05:59:30.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[餐厅练习-Css选择器]]></title>
        <id>https://Tyloo-code.github.io/post/can-ting-lian-xi-css-xuan-ze-qi/</id>
        <link href="https://Tyloo-code.github.io/post/can-ting-lian-xi-css-xuan-ze-qi/">
        </link>
        <updated>2020-12-01T02:33:21.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue从入门到未完待续]]></title>
        <id>https://Tyloo-code.github.io/post/vue-cong-ru-men-dao-wei-wan-dai-xu/</id>
        <link href="https://Tyloo-code.github.io/post/vue-cong-ru-men-dao-wei-wan-dai-xu/">
        </link>
        <updated>2020-11-30T08:50:39.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows系统下Typora 完全使用详解]]></title>
        <id>https://Tyloo-code.github.io/post/windows-xi-tong-xia-typora-wan-quan-shi-yong-xiang-jie/</id>
        <link href="https://Tyloo-code.github.io/post/windows-xi-tong-xia-typora-wan-quan-shi-yong-xiang-jie/">
        </link>
        <updated>2020-11-30T05:40:48.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown基本语法]]></title>
        <id>https://Tyloo-code.github.io/post/markdown-ji-ben-yu-fa/</id>
        <link href="https://Tyloo-code.github.io/post/markdown-ji-ben-yu-fa/">
        </link>
        <updated>2020-11-30T02:09:55.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[HelloWorld]]></title>
        <id>https://Tyloo-code.github.io/post/helloworld/</id>
        <link href="https://Tyloo-code.github.io/post/helloworld/">
        </link>
        <updated>2020-11-29T14:23:07.000Z</updated>
        <summary type="html"><![CDATA[<p>与Gridea的初次邂逅!😘<br>
<img src="https://Tyloo-code.github.io/post-images/1606659885219.jpg" alt="" loading="lazy"></p>
]]></summary>
        <content type="html"><![CDATA[<p>与Gridea的初次邂逅!😘<br>
<img src="https://Tyloo-code.github.io/post-images/1606659885219.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>