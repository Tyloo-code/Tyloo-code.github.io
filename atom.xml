<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Tyloo-code.github.io</id>
    <title>Tyloo</title>
    <updated>2020-12-03T05:43:39.979Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Tyloo-code.github.io"/>
    <link rel="self" href="https://Tyloo-code.github.io/atom.xml"/>
    <subtitle>知行合一</subtitle>
    <logo>https://Tyloo-code.github.io/images/avatar.png</logo>
    <icon>https://Tyloo-code.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Tyloo</rights>
    <entry>
        <title type="html"><![CDATA[Element UI 实战教程(二)]]></title>
        <id>https://Tyloo-code.github.io/post/elementui/</id>
        <link href="https://Tyloo-code.github.io/post/elementui/">
        </link>
        <updated>2020-12-03T05:32:07.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="8form相关组件">8.Form相关组件</h2>
<h3 id="81-radio单选按钮">8.1 Radio单选按钮</h3>
<h4 id="1创建radio按钮">1.创建Radio按钮</h4>
<pre><code class="language-html">&lt;!--组件创建--&gt;
&lt;el-radio v-model=&quot;label&quot; label=&quot;男&quot;&gt;男&lt;/el-radio&gt;
&lt;el-radio v-model=&quot;label&quot; label=&quot;女&quot;&gt;女&lt;/el-radio&gt;
&lt;script&gt;
    export default {
        name: &quot;Radio&quot;,
        data(){
            return{
                label:'男'
            }
        }
    }
&lt;/script&gt;
</code></pre>
<p><code>注意:在使用radio单选按钮是至少加入v-model和label两个属性</code></p>
<h4 id="2radio按钮属性的使用">2.Radio按钮属性的使用</h4>
<pre><code class="language-html">&lt;el-radio v-model=&quot;label&quot; name=&quot;sex&quot; disabled label=&quot;男&quot;&gt;男&lt;/el-radio&gt;
&lt;el-radio v-model=&quot;label&quot; name=&quot;sex&quot; border size=&quot;small&quot; label=&quot;女&quot;&gt;女&lt;/el-radio&gt;
&lt;el-radio v-model=&quot;label&quot; border size=&quot;mini&quot; label=&quot;女&quot;&gt;女&lt;/el-radio&gt;
&lt;el-radio v-model=&quot;label&quot; border size=&quot;medium&quot; label=&quot;女&quot;&gt;女&lt;/el-radio&gt;
</code></pre>
<p><code>总结:属性使用还是直接卸载对应的组件标签上以 属性名=属性值 方式使用</code></p>
<h4 id="3radio事件的使用">3.Radio事件的使用</h4>
<pre><code class="language-html">&lt;el-radio v-model=&quot;label&quot; @change=&quot;aa&quot; name=&quot;sex&quot; label=&quot;男&quot;&gt;男&lt;/el-radio&gt;
&lt;el-radio v-model=&quot;label&quot; @change=&quot;aa&quot; name=&quot;sex&quot; border size=&quot;small&quot; label=&quot;女&quot;&gt;女&lt;/el-radio&gt;



&lt;script&gt;
    export default {
        name: &quot;Radio&quot;,
        data(){
            return{
                label:'男'
            }
        },
        methods:{
            aa(){ //定义的事件处理函数
                console.log(this.label);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<p><code>总结:</code></p>
<ul>
<li>​	事件的使用也是和属性使用是一致都是直接写在对应的组件标签上</li>
<li>事件在使用时必须使用Vue中绑定时间方式进行使用如 @事件名=事件处理函数(绑在在vue组件中对应函数)</li>
</ul>
<h4 id="4radio按钮组">4.radio按钮组</h4>
<pre><code class="language-html">&lt;el-radio-group v-model=&quot;radio&quot;&gt;
  &lt;el-radio :label=&quot;3&quot;&gt;备选项3&lt;/el-radio&gt;
  &lt;el-radio :label=&quot;6&quot;&gt;备选项6&lt;/el-radio&gt;
  &lt;el-radio :label=&quot;9&quot;&gt;备选项9&lt;/el-radio&gt;
&lt;/el-radio-group&gt;
&lt;script&gt;
  export default {
    name: &quot;Radio&quot;,
    data() {
      return {
        radio: 6
      }
    }
  }
&lt;/script&gt;
</code></pre>
<hr>
<h3 id="82-checkbox组件">8.2 checkbox组件</h3>
<h4 id="1创建checkbox组件">1.创建checkbox组件</h4>
<pre><code class="language-html">&lt;el-checkbox v-model=&quot;checked&quot;&gt;北京&lt;/el-checkbox&gt;
&lt;el-checkbox v-model=&quot;checked&quot;&gt;上海&lt;/el-checkbox&gt;
&lt;el-checkbox v-model=&quot;checked&quot;&gt;天津&lt;/el-checkbox&gt;
</code></pre>
<h4 id="2属性使用">2.属性使用</h4>
<pre><code class="language-html">&lt;el-checkbox v-model=&quot;checked&quot;  disabled true-label=&quot;北京&quot;&gt;北京&lt;/el-checkbox&gt;
&lt;el-checkbox checked border true-label=&quot;上海&quot;&gt;上海&lt;/el-checkbox&gt;
&lt;el-checkbox v-model=&quot;checked&quot; true-label=&quot;天津&quot;&gt;天津&lt;/el-checkbox&gt;
</code></pre>
<h4 id="3事件使用">3.事件使用</h4>
<pre><code class="language-html">&lt;el-checkbox @change=&quot;aa&quot;v-model=&quot;checked&quot;  true-label=&quot;上海&quot;&gt;上海&lt;/el-checkbox&gt;
&lt;el-checkbox v-model=&quot;checked&quot; @change=&quot;aa&quot; true-label=&quot;天津&quot;&gt;天津&lt;/el-checkbox&gt;
&lt;script&gt;
    export default {
        name: &quot;Checkbox&quot;,
        data(){
            return{
                checked:true
            }
        },
        methods:{
            aa(){
                console.log(this.checked);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h4 id="4复选框组的使用">4.复选框组的使用</h4>
<pre><code class="language-html">&lt;el-checkbox-group @change=&quot;bb&quot; :min=&quot;1&quot; v-model=&quot;checkList&quot;&gt;
  &lt;el-checkbox label=&quot;复选框 A&quot;&gt;&lt;/el-checkbox&gt;
  &lt;el-checkbox label=&quot;复选框 B&quot;&gt;&lt;/el-checkbox&gt;
  &lt;el-checkbox label=&quot;复选框 C&quot;&gt;&lt;/el-checkbox&gt;
  &lt;el-checkbox label=&quot;禁用&quot; disabled&gt;&lt;/el-checkbox&gt;
  &lt;el-checkbox label=&quot;选中且禁用&quot; disabled&gt;&lt;/el-checkbox&gt;
&lt;/el-checkbox-group&gt;
&lt;script&gt;
    export default {
        name: &quot;Checkbox&quot;,
        data(){
            return{
                checked:true,
                checkList:[],
            }
        },
        methods:{
            aa(){
                console.log(this.checked);
            },
            bb(){
                console.log(this.checkList);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<hr>
<h3 id="83-input-输入框组件">8.3 Input 输入框组件</h3>
<h4 id="1创建input组件">1.创建Input组件</h4>
<pre><code class="language-html">&lt;el-input v-model=&quot;name&quot;&gt;&lt;/el-input&gt;
&lt;script&gt;
    export default {
        name: &quot;Input&quot;,
        data(){
            return {
                name:'xiaochen'
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h4 id="2常用属性">2.常用属性</h4>
<pre><code class="language-html">&lt;el-input v-model=&quot;name&quot; disabled type=&quot;textarea&quot;&gt;&lt;/el-input&gt;
&lt;el-input v-model=&quot;price&quot; :maxlength=&quot;10&quot; show-word-limit :minlength=&quot;5&quot;&gt;&lt;/el-input&gt;
&lt;el-input prefix-icon=&quot;el-icon-user-solid&quot; placeholder=&quot;请输入用户名&quot; clearable v-model=&quot;username&quot;&gt;&lt;/el-input&gt;
&lt;el-input suffix-icon=&quot;el-icon-star-off&quot; placeholder=&quot;请输入密码&quot; show-password type=&quot;password&quot; clearable v-model=&quot;password&quot;&gt;&lt;/el-input&gt;
&lt;script&gt;
    export default {
        name: &quot;Input&quot;,
        data() {
            return {
                restaurants: [],
                state1: '',
                state2: '',
                name:'xiaochen',
                price:0.0,
                username:&quot;&quot;,
                password:&quot;&quot;,
            };
        },
    }
&lt;/script&gt;
</code></pre>
<h4 id="3事件使用-2">3.事件使用</h4>
<pre><code class="language-html">&lt;el-input v-model=&quot;username&quot; @blur=&quot;aaa&quot; @focus=&quot;bbb&quot; @clear=&quot;clears&quot; clearable @input=&quot;ccc&quot;&gt;&lt;/el-input&gt;
&lt;script&gt;
    export default {
        name: &quot;Input&quot;,
        data() {
            return {
                restaurants: [],
                state1: '',
                state2: '',
                name:'xiaochen',
                price:0.0,
                username:&quot;&quot;,
                password:&quot;&quot;,
            };
        },
        methods:{
            aaa(){
                console.log('失去焦点');
                ;
            },
            bbb(){
                console.log(&quot;获取焦点&quot;);
            },
            ccc(value){
                console.log(&quot;改变:&quot;+value);
            },
            clears(){
                console.log(&quot;清楚&quot;);
            }


        }
    }
&lt;/script&gt;
</code></pre>
<h4 id="4方法的使用">4.方法的使用</h4>
<pre><code class="language-html">&lt;h1&gt;方法的使用&lt;/h1&gt;
&lt;el-input v-model=&quot;username&quot; ref=&quot;inputs&quot;&gt;&lt;/el-input&gt;

&lt;el-button @click=&quot;focusInputs&quot;&gt;focus方法&lt;/el-button&gt;
&lt;el-button @click=&quot;blurInputs&quot;&gt;blur方法&lt;/el-button&gt;

&lt;script&gt;
    export default {
        name: &quot;Input&quot;,
        data() {
            return{}
        },
        methods:{
            //调用focus方法
            focusInputs(){
                this.$refs.inputs.focus();
            },
           //调用失去焦点方法
            blurInputs(){
                this.$refs.inputs.blur();
            }
        }
    }
&lt;/script&gt;
</code></pre>
<p><code>总结</code></p>
<ul>
<li>​	在使用组件的方法时需要在对应的组件中加入 <code>ref=&quot;组件别名&quot;</code></li>
<li>在调用方法时直接使用 <code>this.$refs.组件别名.方法名()</code></li>
</ul>
<blockquote>
<p><code>注意:在elementui中所有组件 都存在 属性 事件 和方法</code></p>
<p><code>属性:</code>直接写在对应的组件标签上 使用方式:<code>属性名=属性值</code>方式</p>
<p><code>事件</code>: 直接使用vue绑定事件方式写在对应的组件标签上 使用方式:<code>@事件名=vue中事件处理函数</code></p>
<p><code>方法</code>: 1.在对应组件标签上使用<code>ref=组件别名</code> 2.<code>通过使用this.$refs.组件别名.方法名()</code>进行调用</p>
</blockquote>
<h3 id="84-select选择器组件的使用">8.4 Select选择器组件的使用</h3>
<h4 id="1组件创建">1.组件创建</h4>
<pre><code class="language-markdown"># 1.数据写死在页面上
&lt;el-select v-model=&quot;cityName&quot;&gt;
  &lt;el-option value=&quot;北京&quot;&gt;北京&lt;/el-option&gt;
  &lt;el-option value=&quot;天津&quot;&gt;天津&lt;/el-option&gt;
&lt;/el-select&gt;
	注意:1.要求下拉列表中必须存在option的value属性值 2.要求select中必须使用v-model进行数据绑定

# 2.如何动态获取数据
 &lt;el-select&gt;
 		&lt;el-option v-for=&quot;option in options&quot; :label=&quot;option.name&quot; :value=&quot;option.id&quot; :key=&quot;option.id&quot;&gt;
 		&lt;/el-option&gt;
 &lt;/el-select&gt;

  &lt;script&gt;
      export default {
          name: &quot;Select&quot;,
          data(){
              return{
                  options:[
                      {id:'1',name:&quot;研发部&quot;},
                      {id:'2',name:&quot;小卖部&quot;},
                      {id:'3',name:&quot;小米部&quot;},
                  ]
              }
          },
      }
  &lt;/script&gt;
  
# 3.获取下拉列表选中数据
 &lt;el-select v-model=&quot;cityId&quot; multiple clearable&gt;
        &lt;el-option v-for=&quot;option in options&quot; :label=&quot;option.name&quot; :value=&quot;option.id&quot; :key=&quot;option.id&quot;&gt;&lt;/el-option&gt;
&lt;/el-select&gt;
&lt;script&gt;
    export default {
        name: &quot;Select&quot;,
        data(){
            return{
                options:[
                    {id:'1',name:&quot;研发部&quot;},
                    {id:'2',name:&quot;小卖部&quot;},
                    {id:'3',name:&quot;小米部&quot;},
                ],
                cityId:''
            }
        },
    }
&lt;/script&gt;
</code></pre>
<h4 id="2属性使用-2">2.属性使用</h4>
<pre><code class="language-html">&lt;el-select v-model=&quot;cityId&quot; multiple clearable&gt;
  ......
&lt;/el-select&gt;
</code></pre>
<h4 id="3事件的使用">3.事件的使用</h4>
<pre><code class="language-html">&lt;el-select v-model=&quot;cityId&quot; @change=&quot;aaa&quot; multiple clearable&gt;
  &lt;el-option v-for=&quot;option in options&quot; :label=&quot;option.name&quot; :value=&quot;option.id&quot; :key=&quot;option.id&quot;&gt;
  &lt;/el-option&gt;
&lt;/el-select&gt;
&lt;script&gt;
    export default {
        name: &quot;Select&quot;,
        data(){
            return{
                options:[
                    {id:'1',name:&quot;研发部&quot;},
                    {id:'2',name:&quot;小卖部&quot;},
                    {id:'3',name:&quot;小米部&quot;},
                ],
                cityId:'',
                cityName:''
            }
        },
        methods:{
            aaa(value){
                console.log(value);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h4 id="4方法的使用-2">4.方法的使用</h4>
<pre><code class="language-html">1.给组件通过ref起别名并绑定到vue实例中
 &lt;el-select ref=&quot;selects&quot; v-model=&quot;cityId&quot; @change=&quot;aaa&quot; multiple clearable&gt;
       ....
 &lt;/el-select&gt;
2.调用方法
 this.$refs.selects.focus();//方法调用
</code></pre>
<hr>
<h3 id="85-switch-开关组件">8.5 Switch 开关组件</h3>
<h4 id="1switch组件的创建">1.Switch组件的创建</h4>
<pre><code class="language-html">&lt;el-switch v-model=&quot;value&quot;&gt;&lt;/el-switch&gt;
&lt;script&gt;
  export default {
    name: &quot;Switchs&quot;,
    data(){
      return{
        value:true
      }
    }
  }
&lt;/script&gt;
</code></pre>
<h4 id="2属性使用-3">2.属性使用</h4>
<pre><code class="language-html">&lt;el-switch v-model=&quot;value&quot; active-text=&quot;打开&quot; active-color=&quot;#13ce66&quot; inactive-color=&quot;#ff4949&quot; :active-
           value=&quot;true&quot; :inactive-value=&quot;false&quot; inactive-text=&quot;关闭&quot; :width=&quot;200&quot;&gt;
&lt;/el-switch&gt;
</code></pre>
<h4 id="3事件使用-3">3.事件使用</h4>
<pre><code class="language-html">&lt;el-switch v-model=&quot;value&quot; @change=&quot;aaa&quot;&gt;&lt;/el-switch&gt;
&lt;script&gt;
    export default {
        name: &quot;Switchs&quot;,
        data(){
            return{
                value:true
            }
        },
        methods:{
            aaa(value){
                console.log(value);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h4 id="4方法使用">4.方法使用</h4>
<pre><code class="language-html">&lt;el-switch ref=&quot;sw&quot; v-model=&quot;value&quot; @change=&quot;aaa&quot; active-text=&quot;打开&quot; active-color=&quot;#13ce66&quot; inactive-color=&quot;#ff4949&quot; :active-value=&quot;true&quot; :inactive-value=&quot;false&quot; inactive-text=&quot;关闭&quot; :width=&quot;200&quot;&gt;&lt;/el-switch&gt;
&lt;el-button @click=&quot;bbb&quot;&gt;调用方法&lt;/el-button&gt;

&lt;script&gt;
    export default {
        name: &quot;Switchs&quot;,
        data(){
            return{
                value:true
            }
        }
        ,
        methods:{
            aaa(value){
                console.log(value);
            },
            bbb(){
                alert();
                this.$refs.sw.focus();//方法调用
            }
        }
    }
&lt;/script&gt;
</code></pre>
<hr>
<h3 id="86-datepicker组件">8.6 DatePicker组件</h3>
<h4 id="1创建">1.创建</h4>
<pre><code class="language-html">&lt;el-date-picker v-model=&quot;createDate&quot; &gt;&lt;/el-date-picker&gt;
</code></pre>
<h4 id="2属性的使用">2.属性的使用</h4>
<pre><code class="language-html">&lt;el-date-picker
        v-model=&quot;createDate&quot;
        :editable=&quot;false&quot;
        :clearable=&quot;false&quot;
        placeholder=&quot;请输入创建时间&quot;
        type=&quot;daterange&quot;
        start-placeholder=&quot;生产时间&quot;
        end-placeholder=&quot;过期时间&quot;
        format=&quot;yyyy/MM/dd&quot;
      &gt;
&lt;/el-date-picker&gt;
</code></pre>
<h4 id="3picker-options-和-shortcuts使用">3.Picker Options 和 Shortcuts使用</h4>
<ul>
<li><strong>Shortcuts:</strong> 用来增加日期组件的快捷面板</li>
<li><strong>Picker Options:</strong> 用来对日期控件做自定义配置</li>
</ul>
<h5 id="31-shortcuts使用">3.1 Shortcuts使用</h5>
<pre><code class="language-html">&lt;/el-date-picker&gt;
&lt;h1&gt;日期配置&lt;/h1&gt;
&lt;el-date-picker
                v-model=&quot;createDate&quot;
                type=&quot;date&quot;
                placeholder=&quot;请输入时间&quot;
                :picker-options=&quot;pickerOptions&quot;
                &gt;
&lt;/el-date-picker&gt;
&lt;script&gt;
    export default {
        name: &quot;DatePrickers&quot;,
        data(){
            return{
                createDate:&quot;&quot;,
                pickerOptions: {
                    disabledDate(time) {
                        return time.getTime() &gt; Date.now();
                    },
                    shortcuts: [{  //定义的shortucts
                        text: '今天',
                        onClick(picker) {
                            picker.$emit('pick', new Date());
                        }
                    }, {
                        text: '昨天',
                        onClick(picker) {
                            const date = new Date();
                            date.setTime(date.getTime() - 3600 * 1000 * 24);
                            picker.$emit('pick', date);
                        }
                    }, {
                        text: '一周前',
                        onClick(picker) {
                            const date = new Date();
                            date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);
                            picker.$emit('pick', date);
                        }
                    }]
                },
            }
        }
    }
&lt;/script&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://Tyloo-code.github.io/post-images/1606970853719.png" alt="image-20200511100330078" loading="lazy"></figure>
<h5 id="32-picker-options">3.2 Picker Options</h5>
<pre><code class="language-html">&lt;el-date-picker
                v-model=&quot;createDate&quot;
                type=&quot;date&quot;
                placeholder=&quot;请输入时间&quot;
                :picker-options=&quot;pickerOptions&quot;
                &gt;
&lt;/el-date-picker&gt;

&lt;script&gt;
    export default {
        name: &quot;DatePrickers&quot;,
        data(){
            return{
                createDate:&quot;&quot;,
                pickerOptions: {
                    disabledDate(time) { //用来对日期进行的控制
                        return time.getTime() &lt; Date.now();
                    }
                },
            }
        }
    }
&lt;/script&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://Tyloo-code.github.io/post-images/1606970839111.png" alt="image-20200511100634677" loading="lazy"></figure>
<h4 id="4事件使用">4.事件使用</h4>
<pre><code class="language-html">&lt;el-date-picker
                .....
                :picker-options=&quot;pickerOptions&quot;
                @change=&quot;aaa&quot;
                &gt;
&lt;/el-date-picker&gt;

&lt;script&gt;
    export default {
        name: &quot;DatePrickers&quot;,
        data(){
            return{
                createDate:&quot;&quot;,
            }
        },
        methods:{
            aaa(value){  //发生change事件的函数
                console.log(value);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<hr>
<h3 id="87-upload组件">8.7 Upload组件</h3>
<h4 id="1组件创建-2">1.组件创建</h4>
<pre><code class="language-html">&lt;el-upload action=&quot;https://jsonplaceholder.typicode.com/posts/&quot; :file-list=&quot;fileList&quot;&gt;
  &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;点击上传&lt;/el-button&gt;
  &lt;div slot=&quot;tip&quot; class=&quot;el-upload__tip&quot;&gt;只能上传jpg/png文件，且不超过500kb&lt;/div&gt;
&lt;/el-upload&gt;
</code></pre>
<p><code>注意:在使用upload组件时必须设置action属性 action属性为必要参数不能省略</code></p>
<h4 id="2属性和事件的使用">2.属性和事件的使用</h4>
<pre><code class="language-html">&lt;el-upload :limit=&quot;3&quot; :on-exceed=&quot;exceed&quot; :multiple=&quot;false&quot; :before-remove=&quot;beforeRemove&quot; :on-remove=&quot;remove&quot; :on-preview=&quot;show&quot; :drag=&quot;true&quot; accept=&quot;.txt,.png&quot; :show-file-list=&quot;true&quot; name=&quot;aaa&quot; :data=&quot;info&quot; action=&quot;https://jsonplaceholder.typicode.com/posts/&quot;
               :file-list=&quot;fileList&quot;&gt;
  &lt;i class=&quot;el-icon-upload&quot;&gt;&lt;/i&gt;
  &lt;div class=&quot;el-upload__text&quot;&gt;将文件拖到此处，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt;
  &lt;div class=&quot;el-upload__tip&quot; slot=&quot;tip&quot;&gt;只能上传jpg/png文件，且不超过500kb&lt;/div&gt;
&lt;/el-upload&gt;

&lt;script&gt;
    export default {
        name: &quot;Uploads&quot;,
        data() {
            return {
                fileList: [{
                    name: 'food.jpeg',
                    url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'
                }, {
                    name: 'food2.jpeg',
                    url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'
                }],
                info: {id:&quot;21&quot;}
            }
        },
        methods:{
            show(file){
                console.log(file);
            },
            remove(file,fileList){
                console.log(file);
                console.log(fileList);
                //alert(fileList.length)
            },
            beforeRemove(file,fileList){
                if(fileList.length&lt;3){
                    alert(&quot;上传文件不能少于3个&quot;)
                    return false;
                }
            },
            exceed(file,fileList){
                alert(&quot;文件超出上传的个数限制&quot;)
            }
        }
    }
&lt;/script&gt;
</code></pre>
<ul>
<li><strong>注意:在使用upload组件时没有event事件,所有事件都是属性事件</strong></li>
</ul>
<h4 id="3方法的使用">3.方法的使用</h4>
<pre><code class="language-html">&lt;el-upload ref=&quot;uploads&quot; ....&gt;........&lt;/el-upload&gt;

方法调用:
	this.$refs.uploads.clearFiles();
	this.$refs.uploads.abort();
	this.$refs.uploads.submit();
</code></pre>
<hr>
<h3 id="88-form组件">8.8 Form组件</h3>
<h4 id="1组件的创建">1.组件的创建</h4>
<pre><code class="language-html">&lt;el-form ref=&quot;form&quot; :model=&quot;form&quot; label-width=&quot;80px&quot;&gt;
  &lt;el-form-item label=&quot;活动名称&quot;&gt;
    &lt;el-input v-model=&quot;form.name&quot;&gt;&lt;/el-input&gt;
  &lt;/el-form-item&gt;
  ......
  &lt;el-form-item&gt;
    &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit&quot;&gt;立即创建&lt;/el-button&gt;
    &lt;el-button&gt;取消&lt;/el-button&gt;
  &lt;/el-form-item&gt;
&lt;/el-form&gt;
&lt;script&gt;
    export default {
        name: &quot;Form&quot;,
        data() {
            return {
                form: {
                    name: '',
                    region: '',
                    date1: '',
                    date2: '',
                    delivery: false,
                    type: [],
                    resource: '',
                    desc: ''
                }
            }
        },
        methods: {
            onSubmit() {
                console.log('submit!');
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h4 id="2内联表单">2.内联表单</h4>
<pre><code class="language-html">&lt;el-form :inline=&quot;true&quot; :model=&quot;formInline&quot; class=&quot;demo-form-inline&quot;&gt;
		.......
&lt;/el-form&gt;
</code></pre>
<p><code>通过设置 inline=true方式将表单作为内联表单处理</code></p>
<h4 id="3表单验证">3.表单验证</h4>
<ul>
<li><strong>使用说明:</strong></li>
</ul>
<blockquote>
<p>Form 组件提供了表单验证的功能，只需要通过 <code>rules</code> 属性传入约定的验证规则，并将 Form-Item 的 <code>prop</code> 属性设置为需校验的字段名即可。校验规则参见 <a href="https://github.com/yiminghe/async-validator">async-validator</a></p>
</blockquote>
<h5 id="31-失去焦点自动验证">3.1 失去焦点自动验证</h5>
<pre><code class="language-html">&lt;el-form :rules=&quot;rules&quot; ...&gt;
  &lt;el-form-item label=&quot;活动名称&quot; prop=&quot;name&quot;&gt;
      &lt;el-input v-model=&quot;form.name&quot;&gt;&lt;/el-input&gt;
  &lt;/el-form-item&gt;
  ....
&lt;/el-form&gt;
&lt;script&gt;
    export default {
        name: &quot;Form&quot;,
        data() {
            return {
                form: {
                    name: '',
                    region: '',
                    date1: '',
                    date2: '',
                    delivery: false,
                    type: [],
                    resource: '',
                    desc: ''
                },
                rules: {
                    name: [
                        {required: true, message: '请输入活动名称', trigger: 'blur'},
                        {min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur'}
                    ],
                }
            }
        },
        methods: {
            onSubmit() {
                console.log('submit!');
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h5 id="32-表单提交调用表单组件的验证方法验证">3.2 表单提交调用表单组件的验证方法验证</h5>
<pre><code class="language-html">&lt;el-form :rules=&quot;rules&quot;.... ref=&quot;form&quot; &gt;
    &lt;el-form-item label=&quot;活动名称&quot; prop=&quot;name&quot;&gt;
      &lt;el-input v-model=&quot;form.name&quot;&gt;&lt;/el-input&gt;
  	&lt;/el-form-item&gt;
  	&lt;el-form-item&gt;
      &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit('form')&quot;&gt;立即创建&lt;/el-button&gt;
      &lt;el-button&gt;取消&lt;/el-button&gt;
  	&lt;/el-form-item&gt;
&lt;/el-form&gt;
...
methods: {
            onSubmit(formName) {
                this.$refs[formName].validate((valid) =&gt; {
                    if (valid) {
                        alert('submit!');
                        //发送异步请求 到 springboot项目
                    } else {
                        console.log('error submit!!');
                        return false;
                    }
                });
            }
        }
</code></pre>
<h4 id="4自定义表单的验证规则">4.自定义表单的验证规则</h4>
<pre><code class="language-html">&lt;el-form :model=&quot;ruleForm&quot; :rules=&quot;rules&quot; ref=&quot;ruleForm&quot; label-width=&quot;100px&quot;&gt;
  &lt;el-form-item label=&quot;手机号&quot; prop=&quot;phone&quot;&gt;
    &lt;el-input type=&quot;password&quot; v-model=&quot;ruleForm.phone&quot; &gt;&lt;/el-input&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item&gt;
    &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm('ruleForm')&quot;&gt;提交&lt;/el-button&gt;
    &lt;el-button @click=&quot;resetForm('ruleForm')&quot;&gt;重置&lt;/el-button&gt;
  &lt;/el-form-item&gt;
&lt;/el-form&gt;

&lt;script&gt;
    export default {
        name: &quot;Form&quot;,
        data() {
            let validatePhone = (rule,value,callback)=&gt;{ //定义自定义的验证规则
                console.log(rule);
                console.log(value);
                console.log(callback);
                if(!value){
                    callback(new Error(&quot;手机号不能为空!&quot;));
                }
                if(!/^1[3456789]\d{9}$/.test(value)){
                    callback(new Error(&quot;手机号码不正确!!&quot;))
                }
            }
            return {
                form: {
                    name: '',
                    region: '',
                    date1: '',
                    date2: '',
                    delivery: false,
                    type: [],
                    resource: '',
                    desc: ''
                },
                rules: { //验证规则
                    name: [ //使用默认规则
                        {required: true, message: '请输入活动名称', trigger: 'blur'},
                        {min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur'}
                    ],
                    phone:[  //使用自定义规则
                        {validator:validatePhone,trigger: 'blur'}
                    ]
                },
                ruleForm:{
                    phone:'',
                },
            }
        },
        methods: {
           
        }
    }
&lt;/script&gt;
</code></pre>
<hr>
<h2 id="9消息提示">9.消息提示</h2>
<h3 id="91警告提示">9.1警告提示</h3>
<h4 id="11-创建警告提示">1.1 创建警告提示</h4>
<pre><code class="language-html">&lt;el-alert title=&quot;成功信息提示&quot; :closable=&quot;false&quot; type=&quot;success&quot;&gt;
  &lt;div slot&gt;我是辅助信息&lt;/div&gt;
&lt;/el-alert&gt;
&lt;el-alert title=&quot;成功信息提示&quot; type=&quot;info&quot;&gt;&lt;/el-alert&gt;
&lt;el-alert title=&quot;成功信息提示&quot; type=&quot;warning&quot;&gt;&lt;/el-alert&gt;
&lt;el-alert title=&quot;成功信息提示&quot; type=&quot;error&quot;&gt;&lt;/el-alert&gt;
</code></pre>
<h4 id="12属性的使用">1.2属性的使用</h4>
<pre><code class="language-html">&lt;el-alert title=&quot;成功信息提示&quot; effect=&quot;dark&quot; :show-icon=&quot;true&quot; center :closable=&quot;false&quot; type=&quot;success&quot;&gt;
  &lt;div slot&gt;我是辅助信息&lt;/div&gt;
&lt;/el-alert&gt;
</code></pre>
<h3 id="92-message消息提示">9.2 Message消息提示</h3>
<h4 id="21-创建组件">2.1 创建组件</h4>
<ul>
<li><strong>注意:这个组件的创建无须在页面中书写任何标签,他是一个js插件,在需要展示消息提示的位置直接调用提供的js插件方法即可</strong></li>
</ul>
<pre><code class="language-js"># 1.创建最简单的消息
	this.$message('这是一个消息提示!!')

# 2.自定义消息内容
	this.$message({
    message: h('p', null, [
      h('span', null, '订单创建成功,您的订单编号为: '),
      h('i', { style: 'color: teal' }, '87')
    ])
  });

# 3.不同主题的消息提示
	 this.$message({
     message:'这是信息提示',
     type:&quot;success&quot;,
   })
		//主题样式:  success  info  warning  error

# 4.属性使用
	this.$message({
    message:'这是信息提示',
    type:&quot;success&quot;,
    showClose:true,
    center:true,
    iconClass:'el-icon-user-solid',
    duration:0
  })
# 5.方法的使用
	this.$message.closeAll();

</code></pre>
<hr>
<h2 id="10table表格组件">10.table表格组件</h2>
<h3 id="1组件的创建-2">1.组件的创建</h3>
<pre><code class="language-html">&lt;el-table :data=&quot;tableData&quot;&gt;
  &lt;el-table-column prop=&quot;id&quot; label=&quot;编号&quot;&gt;&lt;/el-table-column&gt;
  &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot;&gt;&lt;/el-table-column&gt;
  &lt;el-table-column prop=&quot;age&quot; label=&quot;年龄&quot;&gt;&lt;/el-table-column&gt;
  &lt;el-table-column prop=&quot;email&quot; label=&quot;邮箱&quot;&gt;&lt;/el-table-column&gt;
&lt;/el-table&gt;
&lt;script&gt;
    export default {
        name: &quot;Tables&quot;,
        data(){
            return {
                tableData:[
                    {id:21,name:&quot;小陈&quot;,age:23,email:&quot;60037647@qq.com&quot;},
                    {id:22,name:&quot;小张&quot;,age:25,email:&quot;60038647@qq.com&quot;},
                ]
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h3 id="2表格中列属性">2.表格中列属性</h3>
<ul>
<li><strong>el-table-column属性</strong></li>
</ul>
<pre><code class="language-html">&lt;el-table-column prop=&quot;id&quot; :resizable=&quot;false&quot; header-align=&quot;left&quot; align=&quot;center&quot; fixed=&quot;left&quot; width=&quot;200px;&quot; label=&quot;编号&quot;&gt;&lt;/el-table-column&gt;
&lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot;&gt;&lt;/el-table-column&gt;
&lt;el-table-column prop=&quot;age&quot; :sort-method=&quot;sorts&quot; sortable label=&quot;年龄&quot;&gt;&lt;/el-table-column&gt;
&lt;el-table-column prop=&quot;email&quot; label=&quot;邮箱&quot;&gt;&lt;/el-table-column&gt;
&lt;el-table-column prop=&quot;dept.name&quot; :formatter=&quot;showDept&quot; label=&quot;部门&quot;&gt;&lt;/el-table-column&gt;
&lt;script&gt;
    export default {
        name: &quot;Tables&quot;,
        data() {
            return {
                tableData: [
                    {
                        id: 21, name: &quot;小陈&quot;, age: 23, email: &quot;60037647@qq.com&quot;,
                        dept: {id: 1, name: &quot;研发部&quot;}
                    },
                    {
                        id: 22, name: &quot;小张&quot;, age: 25, email: &quot;60038647@qq.com&quot;,
                        dept: {id: 1, name: &quot;小卖部&quot;}
                    },
                    {
                        id: 23, name: &quot;小李&quot;, age: 25, email: &quot;60038657@qq.com&quot;,
                        dept:{}
                    },
                ]
            }
        },
        methods: {
            sorts(a, b) {
                return a.age - b.age;
            },
            showDept(row, column, cellValue, index){
                console.log(row);
                console.log(column);
                console.log(cellValue);
                console.log(index);
                if(cellValue){
                    return cellValue
                }
                return &quot;暂无部门&quot;;
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h3 id="3表格属性">3.表格属性</h3>
<pre><code class="language-html">&lt;el-table :data=&quot;tableData&quot; empty-text=&quot;暂无数据&quot; :row-class-name=&quot;showCss&quot; highlight-current-row :show-header=&quot;true&quot; :fit=&quot;true&quot;
              size=&quot;mini&quot; :height=&quot;600&quot; border&gt;

&lt;/el-table&gt;
&lt;script&gt;
  .....
	methods: {
            showCss({row, rowIndex}) {
                if (rowIndex % 2 == 0) {
                    return &quot;warning-row&quot;;
                }
                return &quot;success-row&quot;;
            }
        }
 &lt;/script&gt;
</code></pre>
<h3 id="4组件事件使用">4.组件事件使用</h3>
<pre><code class="language-html">&lt;el-table @事件名=&quot;事件处理函数名&quot;&gt;&lt;el-table&gt;

&lt;script&gt;
    export default {
        name: &quot;Tables&quot;,
        data() {
            //....
        },
        methods: {
            //...事件处理函数
            selectRow(selection, row){
                console.log(selection);
                console.log(row);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h3 id="5组件方法的使用">5.组件方法的使用</h3>
<pre><code class="language-html">&lt;el-table  ref=&quot;mytable&quot;&gt;........&lt;/el-table&gt;
//调用方法
	this.$refs.mytable.方法名  
</code></pre>
<h3 id="6表格中定义操作列">6.表格中定义操作列</h3>
<pre><code class="language-html">&lt;el-table&gt;
  ....
	 &lt;el-table-column label=&quot;操作&quot;&gt;
      &lt;template slot-scope=&quot;scope&quot;&gt;
        &lt;el-button
          size=&quot;mini&quot;
          @click=&quot;handleEdit(scope.$index, scope.row)&quot;&gt;编辑&lt;/el-button&gt;
        &lt;el-button
          size=&quot;mini&quot;
          type=&quot;danger&quot;
          @click=&quot;handleDelete(scope.$index, scope.row)&quot;&gt;删除&lt;/el-button&gt;
      &lt;/template&gt;
    &lt;/el-table-column&gt;
&lt;/el-table&gt;
&lt;script&gt;
    export default {
        name: &quot;Tables&quot;,
        data() {
            .....
        },
        methods: {
						//用来处理编辑和删除的事件函数
            handleEdit(index,row){
                console.log(index);
                console.log(row);
            },
            handleDelete(index,row){
                console.log(index);
                console.log(row);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h2 id=""><img src="https://Tyloo-code.github.io/post-images/1606970684096.png" alt="image-20200513101148070" loading="lazy"></h2>
<h3 id="7自定义表头">7.自定义表头</h3>
<pre><code class="language-html"> &lt;el-table :data=&quot;tableData.filter(data =&gt; !search || data.name.toLowerCase().includes(search.toLowerCase()))&quot; &gt;
   .....
   &lt;!--展示搜索和操作--&gt;
   &lt;el-table-column&gt;
        &lt;template slot=&quot;header&quot; slot-scope=&quot;scope&quot;&gt;
          &lt;el-input
            v-model=&quot;search&quot;
            size=&quot;mini&quot;
            placeholder=&quot;输入关键字搜索&quot;/&gt;
        &lt;/template&gt;
        &lt;template slot-scope=&quot;scope&quot;&gt;
          &lt;el-button
            size=&quot;mini&quot;
            @click=&quot;handleEdit(scope.$index, scope.row)&quot;&gt;编辑&lt;/el-button&gt;
          &lt;el-button
            size=&quot;mini&quot;
            type=&quot;danger&quot;
            @click=&quot;handleDelete(scope.$index, scope.row)&quot;&gt;删除&lt;/el-button&gt;
        &lt;/template&gt;
      &lt;/el-table-column&gt;
&lt;/el-table&gt;
&lt;script&gt;
    export default {
        name: &quot;Tables&quot;,
        data() {
            return {
                tableData: [
                    {
                        id: 21, name: &quot;小陈&quot;, age: 23, email: &quot;60037647@qq.com&quot;,
                        dept: {id: 1, name: &quot;研发部&quot;}
                    },
                    {
                        id: 22, name: &quot;小张&quot;, age: 25, email: &quot;60038647@qq.com&quot;,
                        dept: {id: 1, name: &quot;小卖部&quot;}
                    },
                    {
                        id: 23, name: &quot;小李&quot;, age: 25, email: &quot;60038657@qq.com&quot;,
                        dept: {}
                    },
                    {
                        id: 24, name: &quot;小四&quot;, age: 25, email: &quot;60038657@qq.com&quot;,
                        dept: {}
                    },
                ],
                search: ''
            }
        },
        methods: {
            sorts(a, b) {
                return a.age - b.age;
            },
            showDept(row, column, cellValue, index) {
                if (cellValue) {
                    return cellValue
                }
                return &quot;暂无部门&quot;;
            },
            showCss({row, rowIndex}) {
                if (rowIndex % 2 == 0) {
                    return &quot;warning-row&quot;;
                }
                return &quot;success-row&quot;;
            },
            selectRow(selection, row){
                console.log(selection);
                console.log(row);
            },
            clearSelect(){
                this.$refs.mytable.clearSelection();
            },
            handleEdit(index,row){
                console.log(index);
                console.log(row);
            },
            handleDelete(index,row){
                console.log(index);
                console.log(row);
            }
        }
    }
&lt;/script&gt;

</code></pre>
<figure data-type="image" tabindex="3"><img src="https://Tyloo-code.github.io/post-images/1606970641506.png" alt="image-20200513101814910" loading="lazy"></figure>
<hr>
]]></summary>
        <content type="html"><![CDATA[<h2 id="8form相关组件">8.Form相关组件</h2>
<h3 id="81-radio单选按钮">8.1 Radio单选按钮</h3>
<h4 id="1创建radio按钮">1.创建Radio按钮</h4>
<pre><code class="language-html">&lt;!--组件创建--&gt;
&lt;el-radio v-model=&quot;label&quot; label=&quot;男&quot;&gt;男&lt;/el-radio&gt;
&lt;el-radio v-model=&quot;label&quot; label=&quot;女&quot;&gt;女&lt;/el-radio&gt;
&lt;script&gt;
    export default {
        name: &quot;Radio&quot;,
        data(){
            return{
                label:'男'
            }
        }
    }
&lt;/script&gt;
</code></pre>
<p><code>注意:在使用radio单选按钮是至少加入v-model和label两个属性</code></p>
<h4 id="2radio按钮属性的使用">2.Radio按钮属性的使用</h4>
<pre><code class="language-html">&lt;el-radio v-model=&quot;label&quot; name=&quot;sex&quot; disabled label=&quot;男&quot;&gt;男&lt;/el-radio&gt;
&lt;el-radio v-model=&quot;label&quot; name=&quot;sex&quot; border size=&quot;small&quot; label=&quot;女&quot;&gt;女&lt;/el-radio&gt;
&lt;el-radio v-model=&quot;label&quot; border size=&quot;mini&quot; label=&quot;女&quot;&gt;女&lt;/el-radio&gt;
&lt;el-radio v-model=&quot;label&quot; border size=&quot;medium&quot; label=&quot;女&quot;&gt;女&lt;/el-radio&gt;
</code></pre>
<p><code>总结:属性使用还是直接卸载对应的组件标签上以 属性名=属性值 方式使用</code></p>
<h4 id="3radio事件的使用">3.Radio事件的使用</h4>
<pre><code class="language-html">&lt;el-radio v-model=&quot;label&quot; @change=&quot;aa&quot; name=&quot;sex&quot; label=&quot;男&quot;&gt;男&lt;/el-radio&gt;
&lt;el-radio v-model=&quot;label&quot; @change=&quot;aa&quot; name=&quot;sex&quot; border size=&quot;small&quot; label=&quot;女&quot;&gt;女&lt;/el-radio&gt;



&lt;script&gt;
    export default {
        name: &quot;Radio&quot;,
        data(){
            return{
                label:'男'
            }
        },
        methods:{
            aa(){ //定义的事件处理函数
                console.log(this.label);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<p><code>总结:</code></p>
<ul>
<li>​	事件的使用也是和属性使用是一致都是直接写在对应的组件标签上</li>
<li>事件在使用时必须使用Vue中绑定时间方式进行使用如 @事件名=事件处理函数(绑在在vue组件中对应函数)</li>
</ul>
<h4 id="4radio按钮组">4.radio按钮组</h4>
<pre><code class="language-html">&lt;el-radio-group v-model=&quot;radio&quot;&gt;
  &lt;el-radio :label=&quot;3&quot;&gt;备选项3&lt;/el-radio&gt;
  &lt;el-radio :label=&quot;6&quot;&gt;备选项6&lt;/el-radio&gt;
  &lt;el-radio :label=&quot;9&quot;&gt;备选项9&lt;/el-radio&gt;
&lt;/el-radio-group&gt;
&lt;script&gt;
  export default {
    name: &quot;Radio&quot;,
    data() {
      return {
        radio: 6
      }
    }
  }
&lt;/script&gt;
</code></pre>
<hr>
<h3 id="82-checkbox组件">8.2 checkbox组件</h3>
<h4 id="1创建checkbox组件">1.创建checkbox组件</h4>
<pre><code class="language-html">&lt;el-checkbox v-model=&quot;checked&quot;&gt;北京&lt;/el-checkbox&gt;
&lt;el-checkbox v-model=&quot;checked&quot;&gt;上海&lt;/el-checkbox&gt;
&lt;el-checkbox v-model=&quot;checked&quot;&gt;天津&lt;/el-checkbox&gt;
</code></pre>
<h4 id="2属性使用">2.属性使用</h4>
<pre><code class="language-html">&lt;el-checkbox v-model=&quot;checked&quot;  disabled true-label=&quot;北京&quot;&gt;北京&lt;/el-checkbox&gt;
&lt;el-checkbox checked border true-label=&quot;上海&quot;&gt;上海&lt;/el-checkbox&gt;
&lt;el-checkbox v-model=&quot;checked&quot; true-label=&quot;天津&quot;&gt;天津&lt;/el-checkbox&gt;
</code></pre>
<h4 id="3事件使用">3.事件使用</h4>
<pre><code class="language-html">&lt;el-checkbox @change=&quot;aa&quot;v-model=&quot;checked&quot;  true-label=&quot;上海&quot;&gt;上海&lt;/el-checkbox&gt;
&lt;el-checkbox v-model=&quot;checked&quot; @change=&quot;aa&quot; true-label=&quot;天津&quot;&gt;天津&lt;/el-checkbox&gt;
&lt;script&gt;
    export default {
        name: &quot;Checkbox&quot;,
        data(){
            return{
                checked:true
            }
        },
        methods:{
            aa(){
                console.log(this.checked);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h4 id="4复选框组的使用">4.复选框组的使用</h4>
<pre><code class="language-html">&lt;el-checkbox-group @change=&quot;bb&quot; :min=&quot;1&quot; v-model=&quot;checkList&quot;&gt;
  &lt;el-checkbox label=&quot;复选框 A&quot;&gt;&lt;/el-checkbox&gt;
  &lt;el-checkbox label=&quot;复选框 B&quot;&gt;&lt;/el-checkbox&gt;
  &lt;el-checkbox label=&quot;复选框 C&quot;&gt;&lt;/el-checkbox&gt;
  &lt;el-checkbox label=&quot;禁用&quot; disabled&gt;&lt;/el-checkbox&gt;
  &lt;el-checkbox label=&quot;选中且禁用&quot; disabled&gt;&lt;/el-checkbox&gt;
&lt;/el-checkbox-group&gt;
&lt;script&gt;
    export default {
        name: &quot;Checkbox&quot;,
        data(){
            return{
                checked:true,
                checkList:[],
            }
        },
        methods:{
            aa(){
                console.log(this.checked);
            },
            bb(){
                console.log(this.checkList);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<hr>
<h3 id="83-input-输入框组件">8.3 Input 输入框组件</h3>
<h4 id="1创建input组件">1.创建Input组件</h4>
<pre><code class="language-html">&lt;el-input v-model=&quot;name&quot;&gt;&lt;/el-input&gt;
&lt;script&gt;
    export default {
        name: &quot;Input&quot;,
        data(){
            return {
                name:'xiaochen'
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h4 id="2常用属性">2.常用属性</h4>
<pre><code class="language-html">&lt;el-input v-model=&quot;name&quot; disabled type=&quot;textarea&quot;&gt;&lt;/el-input&gt;
&lt;el-input v-model=&quot;price&quot; :maxlength=&quot;10&quot; show-word-limit :minlength=&quot;5&quot;&gt;&lt;/el-input&gt;
&lt;el-input prefix-icon=&quot;el-icon-user-solid&quot; placeholder=&quot;请输入用户名&quot; clearable v-model=&quot;username&quot;&gt;&lt;/el-input&gt;
&lt;el-input suffix-icon=&quot;el-icon-star-off&quot; placeholder=&quot;请输入密码&quot; show-password type=&quot;password&quot; clearable v-model=&quot;password&quot;&gt;&lt;/el-input&gt;
&lt;script&gt;
    export default {
        name: &quot;Input&quot;,
        data() {
            return {
                restaurants: [],
                state1: '',
                state2: '',
                name:'xiaochen',
                price:0.0,
                username:&quot;&quot;,
                password:&quot;&quot;,
            };
        },
    }
&lt;/script&gt;
</code></pre>
<h4 id="3事件使用-2">3.事件使用</h4>
<pre><code class="language-html">&lt;el-input v-model=&quot;username&quot; @blur=&quot;aaa&quot; @focus=&quot;bbb&quot; @clear=&quot;clears&quot; clearable @input=&quot;ccc&quot;&gt;&lt;/el-input&gt;
&lt;script&gt;
    export default {
        name: &quot;Input&quot;,
        data() {
            return {
                restaurants: [],
                state1: '',
                state2: '',
                name:'xiaochen',
                price:0.0,
                username:&quot;&quot;,
                password:&quot;&quot;,
            };
        },
        methods:{
            aaa(){
                console.log('失去焦点');
                ;
            },
            bbb(){
                console.log(&quot;获取焦点&quot;);
            },
            ccc(value){
                console.log(&quot;改变:&quot;+value);
            },
            clears(){
                console.log(&quot;清楚&quot;);
            }


        }
    }
&lt;/script&gt;
</code></pre>
<h4 id="4方法的使用">4.方法的使用</h4>
<pre><code class="language-html">&lt;h1&gt;方法的使用&lt;/h1&gt;
&lt;el-input v-model=&quot;username&quot; ref=&quot;inputs&quot;&gt;&lt;/el-input&gt;

&lt;el-button @click=&quot;focusInputs&quot;&gt;focus方法&lt;/el-button&gt;
&lt;el-button @click=&quot;blurInputs&quot;&gt;blur方法&lt;/el-button&gt;

&lt;script&gt;
    export default {
        name: &quot;Input&quot;,
        data() {
            return{}
        },
        methods:{
            //调用focus方法
            focusInputs(){
                this.$refs.inputs.focus();
            },
           //调用失去焦点方法
            blurInputs(){
                this.$refs.inputs.blur();
            }
        }
    }
&lt;/script&gt;
</code></pre>
<p><code>总结</code></p>
<ul>
<li>​	在使用组件的方法时需要在对应的组件中加入 <code>ref=&quot;组件别名&quot;</code></li>
<li>在调用方法时直接使用 <code>this.$refs.组件别名.方法名()</code></li>
</ul>
<blockquote>
<p><code>注意:在elementui中所有组件 都存在 属性 事件 和方法</code></p>
<p><code>属性:</code>直接写在对应的组件标签上 使用方式:<code>属性名=属性值</code>方式</p>
<p><code>事件</code>: 直接使用vue绑定事件方式写在对应的组件标签上 使用方式:<code>@事件名=vue中事件处理函数</code></p>
<p><code>方法</code>: 1.在对应组件标签上使用<code>ref=组件别名</code> 2.<code>通过使用this.$refs.组件别名.方法名()</code>进行调用</p>
</blockquote>
<h3 id="84-select选择器组件的使用">8.4 Select选择器组件的使用</h3>
<h4 id="1组件创建">1.组件创建</h4>
<pre><code class="language-markdown"># 1.数据写死在页面上
&lt;el-select v-model=&quot;cityName&quot;&gt;
  &lt;el-option value=&quot;北京&quot;&gt;北京&lt;/el-option&gt;
  &lt;el-option value=&quot;天津&quot;&gt;天津&lt;/el-option&gt;
&lt;/el-select&gt;
	注意:1.要求下拉列表中必须存在option的value属性值 2.要求select中必须使用v-model进行数据绑定

# 2.如何动态获取数据
 &lt;el-select&gt;
 		&lt;el-option v-for=&quot;option in options&quot; :label=&quot;option.name&quot; :value=&quot;option.id&quot; :key=&quot;option.id&quot;&gt;
 		&lt;/el-option&gt;
 &lt;/el-select&gt;

  &lt;script&gt;
      export default {
          name: &quot;Select&quot;,
          data(){
              return{
                  options:[
                      {id:'1',name:&quot;研发部&quot;},
                      {id:'2',name:&quot;小卖部&quot;},
                      {id:'3',name:&quot;小米部&quot;},
                  ]
              }
          },
      }
  &lt;/script&gt;
  
# 3.获取下拉列表选中数据
 &lt;el-select v-model=&quot;cityId&quot; multiple clearable&gt;
        &lt;el-option v-for=&quot;option in options&quot; :label=&quot;option.name&quot; :value=&quot;option.id&quot; :key=&quot;option.id&quot;&gt;&lt;/el-option&gt;
&lt;/el-select&gt;
&lt;script&gt;
    export default {
        name: &quot;Select&quot;,
        data(){
            return{
                options:[
                    {id:'1',name:&quot;研发部&quot;},
                    {id:'2',name:&quot;小卖部&quot;},
                    {id:'3',name:&quot;小米部&quot;},
                ],
                cityId:''
            }
        },
    }
&lt;/script&gt;
</code></pre>
<h4 id="2属性使用-2">2.属性使用</h4>
<pre><code class="language-html">&lt;el-select v-model=&quot;cityId&quot; multiple clearable&gt;
  ......
&lt;/el-select&gt;
</code></pre>
<h4 id="3事件的使用">3.事件的使用</h4>
<pre><code class="language-html">&lt;el-select v-model=&quot;cityId&quot; @change=&quot;aaa&quot; multiple clearable&gt;
  &lt;el-option v-for=&quot;option in options&quot; :label=&quot;option.name&quot; :value=&quot;option.id&quot; :key=&quot;option.id&quot;&gt;
  &lt;/el-option&gt;
&lt;/el-select&gt;
&lt;script&gt;
    export default {
        name: &quot;Select&quot;,
        data(){
            return{
                options:[
                    {id:'1',name:&quot;研发部&quot;},
                    {id:'2',name:&quot;小卖部&quot;},
                    {id:'3',name:&quot;小米部&quot;},
                ],
                cityId:'',
                cityName:''
            }
        },
        methods:{
            aaa(value){
                console.log(value);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h4 id="4方法的使用-2">4.方法的使用</h4>
<pre><code class="language-html">1.给组件通过ref起别名并绑定到vue实例中
 &lt;el-select ref=&quot;selects&quot; v-model=&quot;cityId&quot; @change=&quot;aaa&quot; multiple clearable&gt;
       ....
 &lt;/el-select&gt;
2.调用方法
 this.$refs.selects.focus();//方法调用
</code></pre>
<hr>
<h3 id="85-switch-开关组件">8.5 Switch 开关组件</h3>
<h4 id="1switch组件的创建">1.Switch组件的创建</h4>
<pre><code class="language-html">&lt;el-switch v-model=&quot;value&quot;&gt;&lt;/el-switch&gt;
&lt;script&gt;
  export default {
    name: &quot;Switchs&quot;,
    data(){
      return{
        value:true
      }
    }
  }
&lt;/script&gt;
</code></pre>
<h4 id="2属性使用-3">2.属性使用</h4>
<pre><code class="language-html">&lt;el-switch v-model=&quot;value&quot; active-text=&quot;打开&quot; active-color=&quot;#13ce66&quot; inactive-color=&quot;#ff4949&quot; :active-
           value=&quot;true&quot; :inactive-value=&quot;false&quot; inactive-text=&quot;关闭&quot; :width=&quot;200&quot;&gt;
&lt;/el-switch&gt;
</code></pre>
<h4 id="3事件使用-3">3.事件使用</h4>
<pre><code class="language-html">&lt;el-switch v-model=&quot;value&quot; @change=&quot;aaa&quot;&gt;&lt;/el-switch&gt;
&lt;script&gt;
    export default {
        name: &quot;Switchs&quot;,
        data(){
            return{
                value:true
            }
        },
        methods:{
            aaa(value){
                console.log(value);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h4 id="4方法使用">4.方法使用</h4>
<pre><code class="language-html">&lt;el-switch ref=&quot;sw&quot; v-model=&quot;value&quot; @change=&quot;aaa&quot; active-text=&quot;打开&quot; active-color=&quot;#13ce66&quot; inactive-color=&quot;#ff4949&quot; :active-value=&quot;true&quot; :inactive-value=&quot;false&quot; inactive-text=&quot;关闭&quot; :width=&quot;200&quot;&gt;&lt;/el-switch&gt;
&lt;el-button @click=&quot;bbb&quot;&gt;调用方法&lt;/el-button&gt;

&lt;script&gt;
    export default {
        name: &quot;Switchs&quot;,
        data(){
            return{
                value:true
            }
        }
        ,
        methods:{
            aaa(value){
                console.log(value);
            },
            bbb(){
                alert();
                this.$refs.sw.focus();//方法调用
            }
        }
    }
&lt;/script&gt;
</code></pre>
<hr>
<h3 id="86-datepicker组件">8.6 DatePicker组件</h3>
<h4 id="1创建">1.创建</h4>
<pre><code class="language-html">&lt;el-date-picker v-model=&quot;createDate&quot; &gt;&lt;/el-date-picker&gt;
</code></pre>
<h4 id="2属性的使用">2.属性的使用</h4>
<pre><code class="language-html">&lt;el-date-picker
        v-model=&quot;createDate&quot;
        :editable=&quot;false&quot;
        :clearable=&quot;false&quot;
        placeholder=&quot;请输入创建时间&quot;
        type=&quot;daterange&quot;
        start-placeholder=&quot;生产时间&quot;
        end-placeholder=&quot;过期时间&quot;
        format=&quot;yyyy/MM/dd&quot;
      &gt;
&lt;/el-date-picker&gt;
</code></pre>
<h4 id="3picker-options-和-shortcuts使用">3.Picker Options 和 Shortcuts使用</h4>
<ul>
<li><strong>Shortcuts:</strong> 用来增加日期组件的快捷面板</li>
<li><strong>Picker Options:</strong> 用来对日期控件做自定义配置</li>
</ul>
<h5 id="31-shortcuts使用">3.1 Shortcuts使用</h5>
<pre><code class="language-html">&lt;/el-date-picker&gt;
&lt;h1&gt;日期配置&lt;/h1&gt;
&lt;el-date-picker
                v-model=&quot;createDate&quot;
                type=&quot;date&quot;
                placeholder=&quot;请输入时间&quot;
                :picker-options=&quot;pickerOptions&quot;
                &gt;
&lt;/el-date-picker&gt;
&lt;script&gt;
    export default {
        name: &quot;DatePrickers&quot;,
        data(){
            return{
                createDate:&quot;&quot;,
                pickerOptions: {
                    disabledDate(time) {
                        return time.getTime() &gt; Date.now();
                    },
                    shortcuts: [{  //定义的shortucts
                        text: '今天',
                        onClick(picker) {
                            picker.$emit('pick', new Date());
                        }
                    }, {
                        text: '昨天',
                        onClick(picker) {
                            const date = new Date();
                            date.setTime(date.getTime() - 3600 * 1000 * 24);
                            picker.$emit('pick', date);
                        }
                    }, {
                        text: '一周前',
                        onClick(picker) {
                            const date = new Date();
                            date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);
                            picker.$emit('pick', date);
                        }
                    }]
                },
            }
        }
    }
&lt;/script&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://Tyloo-code.github.io/post-images/1606970853719.png" alt="image-20200511100330078" loading="lazy"></figure>
<h5 id="32-picker-options">3.2 Picker Options</h5>
<pre><code class="language-html">&lt;el-date-picker
                v-model=&quot;createDate&quot;
                type=&quot;date&quot;
                placeholder=&quot;请输入时间&quot;
                :picker-options=&quot;pickerOptions&quot;
                &gt;
&lt;/el-date-picker&gt;

&lt;script&gt;
    export default {
        name: &quot;DatePrickers&quot;,
        data(){
            return{
                createDate:&quot;&quot;,
                pickerOptions: {
                    disabledDate(time) { //用来对日期进行的控制
                        return time.getTime() &lt; Date.now();
                    }
                },
            }
        }
    }
&lt;/script&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://Tyloo-code.github.io/post-images/1606970839111.png" alt="image-20200511100634677" loading="lazy"></figure>
<h4 id="4事件使用">4.事件使用</h4>
<pre><code class="language-html">&lt;el-date-picker
                .....
                :picker-options=&quot;pickerOptions&quot;
                @change=&quot;aaa&quot;
                &gt;
&lt;/el-date-picker&gt;

&lt;script&gt;
    export default {
        name: &quot;DatePrickers&quot;,
        data(){
            return{
                createDate:&quot;&quot;,
            }
        },
        methods:{
            aaa(value){  //发生change事件的函数
                console.log(value);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<hr>
<h3 id="87-upload组件">8.7 Upload组件</h3>
<h4 id="1组件创建-2">1.组件创建</h4>
<pre><code class="language-html">&lt;el-upload action=&quot;https://jsonplaceholder.typicode.com/posts/&quot; :file-list=&quot;fileList&quot;&gt;
  &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;点击上传&lt;/el-button&gt;
  &lt;div slot=&quot;tip&quot; class=&quot;el-upload__tip&quot;&gt;只能上传jpg/png文件，且不超过500kb&lt;/div&gt;
&lt;/el-upload&gt;
</code></pre>
<p><code>注意:在使用upload组件时必须设置action属性 action属性为必要参数不能省略</code></p>
<h4 id="2属性和事件的使用">2.属性和事件的使用</h4>
<pre><code class="language-html">&lt;el-upload :limit=&quot;3&quot; :on-exceed=&quot;exceed&quot; :multiple=&quot;false&quot; :before-remove=&quot;beforeRemove&quot; :on-remove=&quot;remove&quot; :on-preview=&quot;show&quot; :drag=&quot;true&quot; accept=&quot;.txt,.png&quot; :show-file-list=&quot;true&quot; name=&quot;aaa&quot; :data=&quot;info&quot; action=&quot;https://jsonplaceholder.typicode.com/posts/&quot;
               :file-list=&quot;fileList&quot;&gt;
  &lt;i class=&quot;el-icon-upload&quot;&gt;&lt;/i&gt;
  &lt;div class=&quot;el-upload__text&quot;&gt;将文件拖到此处，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt;
  &lt;div class=&quot;el-upload__tip&quot; slot=&quot;tip&quot;&gt;只能上传jpg/png文件，且不超过500kb&lt;/div&gt;
&lt;/el-upload&gt;

&lt;script&gt;
    export default {
        name: &quot;Uploads&quot;,
        data() {
            return {
                fileList: [{
                    name: 'food.jpeg',
                    url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'
                }, {
                    name: 'food2.jpeg',
                    url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'
                }],
                info: {id:&quot;21&quot;}
            }
        },
        methods:{
            show(file){
                console.log(file);
            },
            remove(file,fileList){
                console.log(file);
                console.log(fileList);
                //alert(fileList.length)
            },
            beforeRemove(file,fileList){
                if(fileList.length&lt;3){
                    alert(&quot;上传文件不能少于3个&quot;)
                    return false;
                }
            },
            exceed(file,fileList){
                alert(&quot;文件超出上传的个数限制&quot;)
            }
        }
    }
&lt;/script&gt;
</code></pre>
<ul>
<li><strong>注意:在使用upload组件时没有event事件,所有事件都是属性事件</strong></li>
</ul>
<h4 id="3方法的使用">3.方法的使用</h4>
<pre><code class="language-html">&lt;el-upload ref=&quot;uploads&quot; ....&gt;........&lt;/el-upload&gt;

方法调用:
	this.$refs.uploads.clearFiles();
	this.$refs.uploads.abort();
	this.$refs.uploads.submit();
</code></pre>
<hr>
<h3 id="88-form组件">8.8 Form组件</h3>
<h4 id="1组件的创建">1.组件的创建</h4>
<pre><code class="language-html">&lt;el-form ref=&quot;form&quot; :model=&quot;form&quot; label-width=&quot;80px&quot;&gt;
  &lt;el-form-item label=&quot;活动名称&quot;&gt;
    &lt;el-input v-model=&quot;form.name&quot;&gt;&lt;/el-input&gt;
  &lt;/el-form-item&gt;
  ......
  &lt;el-form-item&gt;
    &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit&quot;&gt;立即创建&lt;/el-button&gt;
    &lt;el-button&gt;取消&lt;/el-button&gt;
  &lt;/el-form-item&gt;
&lt;/el-form&gt;
&lt;script&gt;
    export default {
        name: &quot;Form&quot;,
        data() {
            return {
                form: {
                    name: '',
                    region: '',
                    date1: '',
                    date2: '',
                    delivery: false,
                    type: [],
                    resource: '',
                    desc: ''
                }
            }
        },
        methods: {
            onSubmit() {
                console.log('submit!');
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h4 id="2内联表单">2.内联表单</h4>
<pre><code class="language-html">&lt;el-form :inline=&quot;true&quot; :model=&quot;formInline&quot; class=&quot;demo-form-inline&quot;&gt;
		.......
&lt;/el-form&gt;
</code></pre>
<p><code>通过设置 inline=true方式将表单作为内联表单处理</code></p>
<h4 id="3表单验证">3.表单验证</h4>
<ul>
<li><strong>使用说明:</strong></li>
</ul>
<blockquote>
<p>Form 组件提供了表单验证的功能，只需要通过 <code>rules</code> 属性传入约定的验证规则，并将 Form-Item 的 <code>prop</code> 属性设置为需校验的字段名即可。校验规则参见 <a href="https://github.com/yiminghe/async-validator">async-validator</a></p>
</blockquote>
<h5 id="31-失去焦点自动验证">3.1 失去焦点自动验证</h5>
<pre><code class="language-html">&lt;el-form :rules=&quot;rules&quot; ...&gt;
  &lt;el-form-item label=&quot;活动名称&quot; prop=&quot;name&quot;&gt;
      &lt;el-input v-model=&quot;form.name&quot;&gt;&lt;/el-input&gt;
  &lt;/el-form-item&gt;
  ....
&lt;/el-form&gt;
&lt;script&gt;
    export default {
        name: &quot;Form&quot;,
        data() {
            return {
                form: {
                    name: '',
                    region: '',
                    date1: '',
                    date2: '',
                    delivery: false,
                    type: [],
                    resource: '',
                    desc: ''
                },
                rules: {
                    name: [
                        {required: true, message: '请输入活动名称', trigger: 'blur'},
                        {min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur'}
                    ],
                }
            }
        },
        methods: {
            onSubmit() {
                console.log('submit!');
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h5 id="32-表单提交调用表单组件的验证方法验证">3.2 表单提交调用表单组件的验证方法验证</h5>
<pre><code class="language-html">&lt;el-form :rules=&quot;rules&quot;.... ref=&quot;form&quot; &gt;
    &lt;el-form-item label=&quot;活动名称&quot; prop=&quot;name&quot;&gt;
      &lt;el-input v-model=&quot;form.name&quot;&gt;&lt;/el-input&gt;
  	&lt;/el-form-item&gt;
  	&lt;el-form-item&gt;
      &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit('form')&quot;&gt;立即创建&lt;/el-button&gt;
      &lt;el-button&gt;取消&lt;/el-button&gt;
  	&lt;/el-form-item&gt;
&lt;/el-form&gt;
...
methods: {
            onSubmit(formName) {
                this.$refs[formName].validate((valid) =&gt; {
                    if (valid) {
                        alert('submit!');
                        //发送异步请求 到 springboot项目
                    } else {
                        console.log('error submit!!');
                        return false;
                    }
                });
            }
        }
</code></pre>
<h4 id="4自定义表单的验证规则">4.自定义表单的验证规则</h4>
<pre><code class="language-html">&lt;el-form :model=&quot;ruleForm&quot; :rules=&quot;rules&quot; ref=&quot;ruleForm&quot; label-width=&quot;100px&quot;&gt;
  &lt;el-form-item label=&quot;手机号&quot; prop=&quot;phone&quot;&gt;
    &lt;el-input type=&quot;password&quot; v-model=&quot;ruleForm.phone&quot; &gt;&lt;/el-input&gt;
  &lt;/el-form-item&gt;
  &lt;el-form-item&gt;
    &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm('ruleForm')&quot;&gt;提交&lt;/el-button&gt;
    &lt;el-button @click=&quot;resetForm('ruleForm')&quot;&gt;重置&lt;/el-button&gt;
  &lt;/el-form-item&gt;
&lt;/el-form&gt;

&lt;script&gt;
    export default {
        name: &quot;Form&quot;,
        data() {
            let validatePhone = (rule,value,callback)=&gt;{ //定义自定义的验证规则
                console.log(rule);
                console.log(value);
                console.log(callback);
                if(!value){
                    callback(new Error(&quot;手机号不能为空!&quot;));
                }
                if(!/^1[3456789]\d{9}$/.test(value)){
                    callback(new Error(&quot;手机号码不正确!!&quot;))
                }
            }
            return {
                form: {
                    name: '',
                    region: '',
                    date1: '',
                    date2: '',
                    delivery: false,
                    type: [],
                    resource: '',
                    desc: ''
                },
                rules: { //验证规则
                    name: [ //使用默认规则
                        {required: true, message: '请输入活动名称', trigger: 'blur'},
                        {min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur'}
                    ],
                    phone:[  //使用自定义规则
                        {validator:validatePhone,trigger: 'blur'}
                    ]
                },
                ruleForm:{
                    phone:'',
                },
            }
        },
        methods: {
           
        }
    }
&lt;/script&gt;
</code></pre>
<hr>
<h2 id="9消息提示">9.消息提示</h2>
<h3 id="91警告提示">9.1警告提示</h3>
<h4 id="11-创建警告提示">1.1 创建警告提示</h4>
<pre><code class="language-html">&lt;el-alert title=&quot;成功信息提示&quot; :closable=&quot;false&quot; type=&quot;success&quot;&gt;
  &lt;div slot&gt;我是辅助信息&lt;/div&gt;
&lt;/el-alert&gt;
&lt;el-alert title=&quot;成功信息提示&quot; type=&quot;info&quot;&gt;&lt;/el-alert&gt;
&lt;el-alert title=&quot;成功信息提示&quot; type=&quot;warning&quot;&gt;&lt;/el-alert&gt;
&lt;el-alert title=&quot;成功信息提示&quot; type=&quot;error&quot;&gt;&lt;/el-alert&gt;
</code></pre>
<h4 id="12属性的使用">1.2属性的使用</h4>
<pre><code class="language-html">&lt;el-alert title=&quot;成功信息提示&quot; effect=&quot;dark&quot; :show-icon=&quot;true&quot; center :closable=&quot;false&quot; type=&quot;success&quot;&gt;
  &lt;div slot&gt;我是辅助信息&lt;/div&gt;
&lt;/el-alert&gt;
</code></pre>
<h3 id="92-message消息提示">9.2 Message消息提示</h3>
<h4 id="21-创建组件">2.1 创建组件</h4>
<ul>
<li><strong>注意:这个组件的创建无须在页面中书写任何标签,他是一个js插件,在需要展示消息提示的位置直接调用提供的js插件方法即可</strong></li>
</ul>
<pre><code class="language-js"># 1.创建最简单的消息
	this.$message('这是一个消息提示!!')

# 2.自定义消息内容
	this.$message({
    message: h('p', null, [
      h('span', null, '订单创建成功,您的订单编号为: '),
      h('i', { style: 'color: teal' }, '87')
    ])
  });

# 3.不同主题的消息提示
	 this.$message({
     message:'这是信息提示',
     type:&quot;success&quot;,
   })
		//主题样式:  success  info  warning  error

# 4.属性使用
	this.$message({
    message:'这是信息提示',
    type:&quot;success&quot;,
    showClose:true,
    center:true,
    iconClass:'el-icon-user-solid',
    duration:0
  })
# 5.方法的使用
	this.$message.closeAll();

</code></pre>
<hr>
<h2 id="10table表格组件">10.table表格组件</h2>
<h3 id="1组件的创建-2">1.组件的创建</h3>
<pre><code class="language-html">&lt;el-table :data=&quot;tableData&quot;&gt;
  &lt;el-table-column prop=&quot;id&quot; label=&quot;编号&quot;&gt;&lt;/el-table-column&gt;
  &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot;&gt;&lt;/el-table-column&gt;
  &lt;el-table-column prop=&quot;age&quot; label=&quot;年龄&quot;&gt;&lt;/el-table-column&gt;
  &lt;el-table-column prop=&quot;email&quot; label=&quot;邮箱&quot;&gt;&lt;/el-table-column&gt;
&lt;/el-table&gt;
&lt;script&gt;
    export default {
        name: &quot;Tables&quot;,
        data(){
            return {
                tableData:[
                    {id:21,name:&quot;小陈&quot;,age:23,email:&quot;60037647@qq.com&quot;},
                    {id:22,name:&quot;小张&quot;,age:25,email:&quot;60038647@qq.com&quot;},
                ]
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h3 id="2表格中列属性">2.表格中列属性</h3>
<ul>
<li><strong>el-table-column属性</strong></li>
</ul>
<pre><code class="language-html">&lt;el-table-column prop=&quot;id&quot; :resizable=&quot;false&quot; header-align=&quot;left&quot; align=&quot;center&quot; fixed=&quot;left&quot; width=&quot;200px;&quot; label=&quot;编号&quot;&gt;&lt;/el-table-column&gt;
&lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot;&gt;&lt;/el-table-column&gt;
&lt;el-table-column prop=&quot;age&quot; :sort-method=&quot;sorts&quot; sortable label=&quot;年龄&quot;&gt;&lt;/el-table-column&gt;
&lt;el-table-column prop=&quot;email&quot; label=&quot;邮箱&quot;&gt;&lt;/el-table-column&gt;
&lt;el-table-column prop=&quot;dept.name&quot; :formatter=&quot;showDept&quot; label=&quot;部门&quot;&gt;&lt;/el-table-column&gt;
&lt;script&gt;
    export default {
        name: &quot;Tables&quot;,
        data() {
            return {
                tableData: [
                    {
                        id: 21, name: &quot;小陈&quot;, age: 23, email: &quot;60037647@qq.com&quot;,
                        dept: {id: 1, name: &quot;研发部&quot;}
                    },
                    {
                        id: 22, name: &quot;小张&quot;, age: 25, email: &quot;60038647@qq.com&quot;,
                        dept: {id: 1, name: &quot;小卖部&quot;}
                    },
                    {
                        id: 23, name: &quot;小李&quot;, age: 25, email: &quot;60038657@qq.com&quot;,
                        dept:{}
                    },
                ]
            }
        },
        methods: {
            sorts(a, b) {
                return a.age - b.age;
            },
            showDept(row, column, cellValue, index){
                console.log(row);
                console.log(column);
                console.log(cellValue);
                console.log(index);
                if(cellValue){
                    return cellValue
                }
                return &quot;暂无部门&quot;;
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h3 id="3表格属性">3.表格属性</h3>
<pre><code class="language-html">&lt;el-table :data=&quot;tableData&quot; empty-text=&quot;暂无数据&quot; :row-class-name=&quot;showCss&quot; highlight-current-row :show-header=&quot;true&quot; :fit=&quot;true&quot;
              size=&quot;mini&quot; :height=&quot;600&quot; border&gt;

&lt;/el-table&gt;
&lt;script&gt;
  .....
	methods: {
            showCss({row, rowIndex}) {
                if (rowIndex % 2 == 0) {
                    return &quot;warning-row&quot;;
                }
                return &quot;success-row&quot;;
            }
        }
 &lt;/script&gt;
</code></pre>
<h3 id="4组件事件使用">4.组件事件使用</h3>
<pre><code class="language-html">&lt;el-table @事件名=&quot;事件处理函数名&quot;&gt;&lt;el-table&gt;

&lt;script&gt;
    export default {
        name: &quot;Tables&quot;,
        data() {
            //....
        },
        methods: {
            //...事件处理函数
            selectRow(selection, row){
                console.log(selection);
                console.log(row);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h3 id="5组件方法的使用">5.组件方法的使用</h3>
<pre><code class="language-html">&lt;el-table  ref=&quot;mytable&quot;&gt;........&lt;/el-table&gt;
//调用方法
	this.$refs.mytable.方法名  
</code></pre>
<h3 id="6表格中定义操作列">6.表格中定义操作列</h3>
<pre><code class="language-html">&lt;el-table&gt;
  ....
	 &lt;el-table-column label=&quot;操作&quot;&gt;
      &lt;template slot-scope=&quot;scope&quot;&gt;
        &lt;el-button
          size=&quot;mini&quot;
          @click=&quot;handleEdit(scope.$index, scope.row)&quot;&gt;编辑&lt;/el-button&gt;
        &lt;el-button
          size=&quot;mini&quot;
          type=&quot;danger&quot;
          @click=&quot;handleDelete(scope.$index, scope.row)&quot;&gt;删除&lt;/el-button&gt;
      &lt;/template&gt;
    &lt;/el-table-column&gt;
&lt;/el-table&gt;
&lt;script&gt;
    export default {
        name: &quot;Tables&quot;,
        data() {
            .....
        },
        methods: {
						//用来处理编辑和删除的事件函数
            handleEdit(index,row){
                console.log(index);
                console.log(row);
            },
            handleDelete(index,row){
                console.log(index);
                console.log(row);
            }
        }
    }
&lt;/script&gt;
</code></pre>
<h2 id=""><img src="https://Tyloo-code.github.io/post-images/1606970684096.png" alt="image-20200513101148070" loading="lazy"></h2>
<h3 id="7自定义表头">7.自定义表头</h3>
<pre><code class="language-html"> &lt;el-table :data=&quot;tableData.filter(data =&gt; !search || data.name.toLowerCase().includes(search.toLowerCase()))&quot; &gt;
   .....
   &lt;!--展示搜索和操作--&gt;
   &lt;el-table-column&gt;
        &lt;template slot=&quot;header&quot; slot-scope=&quot;scope&quot;&gt;
          &lt;el-input
            v-model=&quot;search&quot;
            size=&quot;mini&quot;
            placeholder=&quot;输入关键字搜索&quot;/&gt;
        &lt;/template&gt;
        &lt;template slot-scope=&quot;scope&quot;&gt;
          &lt;el-button
            size=&quot;mini&quot;
            @click=&quot;handleEdit(scope.$index, scope.row)&quot;&gt;编辑&lt;/el-button&gt;
          &lt;el-button
            size=&quot;mini&quot;
            type=&quot;danger&quot;
            @click=&quot;handleDelete(scope.$index, scope.row)&quot;&gt;删除&lt;/el-button&gt;
        &lt;/template&gt;
      &lt;/el-table-column&gt;
&lt;/el-table&gt;
&lt;script&gt;
    export default {
        name: &quot;Tables&quot;,
        data() {
            return {
                tableData: [
                    {
                        id: 21, name: &quot;小陈&quot;, age: 23, email: &quot;60037647@qq.com&quot;,
                        dept: {id: 1, name: &quot;研发部&quot;}
                    },
                    {
                        id: 22, name: &quot;小张&quot;, age: 25, email: &quot;60038647@qq.com&quot;,
                        dept: {id: 1, name: &quot;小卖部&quot;}
                    },
                    {
                        id: 23, name: &quot;小李&quot;, age: 25, email: &quot;60038657@qq.com&quot;,
                        dept: {}
                    },
                    {
                        id: 24, name: &quot;小四&quot;, age: 25, email: &quot;60038657@qq.com&quot;,
                        dept: {}
                    },
                ],
                search: ''
            }
        },
        methods: {
            sorts(a, b) {
                return a.age - b.age;
            },
            showDept(row, column, cellValue, index) {
                if (cellValue) {
                    return cellValue
                }
                return &quot;暂无部门&quot;;
            },
            showCss({row, rowIndex}) {
                if (rowIndex % 2 == 0) {
                    return &quot;warning-row&quot;;
                }
                return &quot;success-row&quot;;
            },
            selectRow(selection, row){
                console.log(selection);
                console.log(row);
            },
            clearSelect(){
                this.$refs.mytable.clearSelection();
            },
            handleEdit(index,row){
                console.log(index);
                console.log(row);
            },
            handleDelete(index,row){
                console.log(index);
                console.log(row);
            }
        }
    }
&lt;/script&gt;

</code></pre>
<figure data-type="image" tabindex="3"><img src="https://Tyloo-code.github.io/post-images/1606970641506.png" alt="image-20200513101814910" loading="lazy"></figure>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Element UI 实战教程(一)]]></title>
        <id>https://Tyloo-code.github.io/post/element-ui-shi-zhan-jiao-cheng/</id>
        <link href="https://Tyloo-code.github.io/post/element-ui-shi-zhan-jiao-cheng/">
        </link>
        <updated>2020-12-03T04:38:55.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="1element-ui-引言">1.Element UI 引言</h2>
<p>官网: https://element.eleme.io/#/zh-CN</p>
<h3 id="11-官方定义">1.1 官方定义</h3>
<p><code>网站快速成型工具</code> 和 <code>桌面端组件库</code></p>
<h3 id="12-定义">1.2 定义</h3>
<p>element ui 就是基于vue的一个ui框架,该框架基于vue开发了很多相关组件,方便我们快速开发页面。</p>
<h3 id="13-由来">1.3 由来</h3>
<p>饿了么前端团队 基于vue进行开发并且进行了开源  element ui 中提供全部都是封装好组件。</p>
<hr>
<h2 id="2安装element-ui">2.安装Element UI</h2>
<h3 id="21通过vue脚手架创建项目">2.1通过vue脚手架创建项目</h3>
<pre><code class="language-js">vue init webpack element(项目名)
</code></pre>
<h3 id="22在vue脚手架项目中安装elementui">2.2在vue脚手架项目中安装elementui</h3>
<pre><code class="language-markdown"># 1.下载elementui的依赖
	npm i element-ui -S

# 2.指定当前项目中使用elementui
	import ElementUI from 'element-ui';
	import 'element-ui/lib/theme-chalk/index.css';

  //在vue脚手架中使用elementui
	Vue.use(ElementUI);
</code></pre>
<hr>
<h2 id="3按钮组件示例">3.按钮组件(示例)</h2>
<figure data-type="image" tabindex="1"><img src="https://Tyloo-code.github.io/post-images/1606970899616.png" alt="image-20200503155535505" loading="lazy"></figure>
<h4 id="31-默认样式按钮">3.1 默认样式按钮</h4>
<pre><code class="language-html">&lt;el-row&gt;
  &lt;el-button&gt;默认按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;success&quot;&gt;成功按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;info&quot;&gt;信息按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;warning&quot;&gt;警告按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;danger&quot;&gt;危险按钮&lt;/el-button&gt;
&lt;/el-row&gt;
</code></pre>
<h4 id="32-简洁按钮">3.2 简洁按钮</h4>
<pre><code class="language-html">&lt;el-row&gt;
  &lt;el-button plain&gt;朴素按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;primary&quot; plain&gt;主要按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;success&quot; plain&gt;成功按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;info&quot; plain&gt;信息按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;warning&quot; plain&gt;警告按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;danger&quot; plain&gt;危险按钮&lt;/el-button&gt;
&lt;/el-row&gt;
</code></pre>
<h4 id="33-圆角按钮">3.3 圆角按钮</h4>
<pre><code class="language-html">&lt;el-row&gt;
  &lt;el-button round&gt;圆角按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;primary&quot; round&gt;主要按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;success&quot; round&gt;成功按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;info&quot; round&gt;信息按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;warning&quot; round&gt;警告按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;danger&quot; round&gt;危险按钮&lt;/el-button&gt;
&lt;/el-row&gt;
</code></pre>
<h4 id="34-图标按钮">3.4 图标按钮</h4>
<pre><code class="language-html">&lt;el-row&gt;
  &lt;el-button icon=&quot;el-icon-search&quot; circle&gt;&lt;/el-button&gt;
  &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; circle&gt;&lt;/el-button&gt;
  &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-check&quot; circle&gt;&lt;/el-button&gt;
  &lt;el-button type=&quot;info&quot; icon=&quot;el-icon-message&quot; circle&gt;&lt;/el-button&gt;
  &lt;el-button type=&quot;warning&quot; icon=&quot;el-icon-star-off&quot; circle&gt;&lt;/el-button&gt;
  &lt;el-button type=&quot;danger&quot; icon=&quot;el-icon-delete&quot; circle&gt;&lt;/el-button&gt;
&lt;/el-row&gt;
</code></pre>
<hr>
<h2 id="4按钮组件的详细使用">4.按钮组件的详细使用</h2>
<p><code>总结:日后使用element ui的相关组件时需要注意的是 所有组件都是el-组件名称开头</code></p>
<h3 id="41创建按钮">4.1创建按钮</h3>
<pre><code class="language-html">&lt;el-button&gt;默认按钮&lt;/el-button&gt;
</code></pre>
<h3 id="42-按钮属性使用">4.2 按钮属性使用</h3>
<pre><code class="language-html">&lt;el-button type=&quot;primary&quot; 属性名=属性值&gt;默认按钮&lt;/el-button&gt;
&lt;el-button type=&quot;success&quot; size=&quot;medium&quot; plain=true round circle icon=&quot;el-icon-loading&quot;&gt;&lt;/el-button&gt;
</code></pre>
<p><code>总结:在elementui中所有组件的属性全部写在组件标签上</code></p>
<h3 id="43-按钮组使用">4.3 按钮组使用</h3>
<pre><code class="language-html">&lt;el-button-group&gt;
  &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-back&quot;&gt;上一页&lt;/el-button&gt;
  &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-right&quot;&gt;下一页&lt;/el-button&gt;
&lt;/el-button-group&gt;
</code></pre>
<p><code>注意:</code></p>
<ul>
<li>在element ui中所有组件都是 <code>el-组件名称</code> 方式进行命名</li>
<li>在element ui中组件的属性使用<code>都是直接将属性名=属性值方式写在对应的组件标签上</code></li>
</ul>
<hr>
<h2 id="5link-文字链接组件">5.Link 文字链接组件</h2>
<h3 id="51-文字链接组件的创建">5.1 文字链接组件的创建</h3>
<pre><code class="language-html">&lt;el-link&gt;默认链接&lt;/el-link&gt;
</code></pre>
<h3 id="52-文字链接组件的属性的使用">5.2 文字链接组件的属性的使用</h3>
<pre><code class="language-html">&lt;el-link  target=&quot;_blank&quot; href=&quot;http://www.baidu.com&quot; &gt;默认链接&lt;/el-link&gt;
&lt;el-link type=&quot;primary&quot;:underline=&quot;false&quot;&gt;默认链接&lt;/el-link&gt;
&lt;el-link type=&quot;success&quot; disabled&gt;默认链接&lt;/el-link&gt;
&lt;el-link type=&quot;info&quot; icon=&quot;el-icon-platform-eleme&quot;&gt;默认链接&lt;/el-link&gt;
&lt;el-link type=&quot;warning&quot;&gt;默认链接&lt;/el-link&gt;
&lt;el-link type=&quot;danger&quot;&gt;默认链接&lt;/el-link&gt;
</code></pre>
<hr>
<h2 id="6layout-栅格布局组件的使用">6.Layout (栅格)布局组件的使用</h2>
<p><code>通过基础的 24 分栏，迅速简便地创建布局</code></p>
<p><code>在element ui中布局组件将页面划分为多个行row,每行最多分为24栏(列)</code></p>
<h3 id="61-使用layout组件">6.1 使用Layout组件</h3>
<pre><code class="language-html">&lt;el-row&gt;
	&lt;el-col :span=&quot;8&quot;&gt;占用8份&lt;/el-col&gt;
  &lt;el-col :span=&quot;8&quot;&gt;占用8份&lt;/el-col&gt;
  &lt;el-col :span=&quot;8&quot;&gt;占用8份&lt;/el-col&gt;
&lt;/el-row&gt;
</code></pre>
<p><code>注意:</code></p>
<ul>
<li>在一个布局组件中 是由 <code>row</code> 和 <code>col</code> 组合而成</li>
<li>在使用时要区分 <code>row属性</code> 和 <code>col属性</code></li>
</ul>
<h3 id="62-属性的使用">6.2 属性的使用</h3>
<ul>
<li>
<p>行属性使用</p>
<pre><code class="language-html">&lt;el-row :gutter=&quot;50&quot; tag=&quot;span&quot;&gt;
  &lt;el-col :span=&quot;4&quot;&gt;&lt;div style=&quot;border: 1px red solid;&quot;&gt;占用4份&lt;/div&gt;&lt;/el-col&gt;
  &lt;el-col :span=&quot;8&quot;&gt;&lt;div style=&quot;border: 1px red solid;&quot;&gt;占用8份&lt;/div&gt;&lt;/el-col&gt;
  &lt;el-col :span=&quot;3&quot;&gt;&lt;div style=&quot;border: 1px red solid;&quot;&gt;占用3份&lt;/div&gt;&lt;/el-col&gt;
  &lt;el-col :span=&quot;9&quot;&gt;&lt;div style=&quot;border: 1px red solid;&quot;&gt;占用9份&lt;/div&gt;&lt;/el-col&gt;
&lt;/el-row&gt;
</code></pre>
</li>
<li>
<p>列属性的使用</p>
<pre><code class="language-html">&lt;el-row&gt;
  &lt;el-col :span=&quot;12&quot; :offset=&quot;9&quot; :psuh=&quot;3&quot; xs&gt;&lt;div style=&quot;border: 1px blue solid;&quot;&gt;我是占用12分&lt;/div&gt;&lt;/el-col&gt;
  &lt;el-col :span=&quot;6&quot;&gt;&lt;div style=&quot;border: 1px blue solid;&quot;&gt;我是占用6分&lt;/div&gt;&lt;/el-col&gt;
&lt;/el-row&gt;
</code></pre>
</li>
</ul>
<hr>
<h2 id="7container-布局容器组件">7.Container 布局容器组件</h2>
<h3 id="71-创建布局容器">7.1 创建布局容器</h3>
<pre><code class="language-html">&lt;el-container&gt;
	
&lt;/el-container&gt;
</code></pre>
<h3 id="72-容器中包含的子元素">7.2 容器中包含的子元素</h3>
<pre><code class="language-html">&lt;el-header&gt;：顶栏容器。
&lt;el-aside&gt;：侧边栏容器。
&lt;el-main&gt;：主要区域容器。
&lt;el-footer&gt;：底栏容器。
</code></pre>
<h3 id="73-容器的嵌套使用">7.3 容器的嵌套使用</h3>
<pre><code class="language-html">&lt;!--创建容器--&gt;
&lt;el-container&gt;
  &lt;!--header--&gt;
  &lt;el-header&gt;&lt;div&gt;&lt;h1&gt;我是标题&lt;/h1&gt;&lt;/div&gt;&lt;/el-header&gt;
  &lt;!--容器嵌套使用--&gt;
  &lt;el-container&gt;
    &lt;!--aside--&gt;
    &lt;el-aside&gt;&lt;div&gt;&lt;h1&gt;我是菜单&lt;/h1&gt;&lt;/div&gt;&lt;/el-aside&gt;
    &lt;!--main--&gt;
    &lt;el-main&gt;&lt;div&gt;&lt;h1&gt;我是中心内容&lt;/h1&gt;&lt;/div&gt;&lt;/el-main&gt;
  &lt;/el-container&gt;
  &lt;el-footer&gt;&lt;div&gt;&lt;h1&gt;我是页脚&lt;/h1&gt;&lt;/div&gt;&lt;/el-footer&gt;
&lt;/el-container&gt;
</code></pre>
<h3 id="74-水平容器">7.4 水平容器</h3>
<pre><code class="language-html">&lt;el-container direction=&quot;horizontal&quot;&gt;
  &lt;!--header--&gt;
  &lt;el-header&gt;&lt;div&gt;&lt;h1&gt;我是标题&lt;/h1&gt;&lt;/div&gt;&lt;/el-header&gt;
  &lt;el-container&gt;
    &lt;!--aside--&gt;
    &lt;el-aside&gt;&lt;div&gt;&lt;h1&gt;我是菜单&lt;/h1&gt;&lt;/div&gt;&lt;/el-aside&gt;
    &lt;!--main--&gt;
    &lt;el-main&gt;&lt;div&gt;&lt;h1&gt;我是中心内容&lt;/h1&gt;&lt;/div&gt;&lt;/el-main&gt;
  &lt;/el-container&gt;
  &lt;el-footer&gt;&lt;div&gt;&lt;h1&gt;我是页脚&lt;/h1&gt;&lt;/div&gt;&lt;/el-footer&gt;
&lt;/el-container&gt;
</code></pre>
<p><code>注意:当子元素中没有有 el-header 或 el-footer 时容器排列为水平</code></p>
<h3 id="75-垂直容器">7.5 垂直容器</h3>
<pre><code class="language-html">&lt;el-container direction=&quot;vertical&quot;&gt;
  &lt;!--header--&gt;
  &lt;el-header&gt;&lt;div&gt;&lt;h1&gt;我是标题&lt;/h1&gt;&lt;/div&gt;&lt;/el-header&gt;
  &lt;el-container&gt;
    &lt;!--aside--&gt;
    &lt;el-aside&gt;&lt;div&gt;&lt;h1&gt;我是菜单&lt;/h1&gt;&lt;/div&gt;&lt;/el-aside&gt;
    &lt;!--main--&gt;
    &lt;el-main&gt;&lt;div&gt;&lt;h1&gt;我是中心内容&lt;/h1&gt;&lt;/div&gt;&lt;/el-main&gt;
  &lt;/el-container&gt;
  &lt;!--footer--&gt;
  &lt;el-footer&gt;&lt;div&gt;&lt;h1&gt;我是页脚&lt;/h1&gt;&lt;/div&gt;&lt;/el-footer&gt;
&lt;/el-container&gt;
</code></pre>
<hr>
]]></summary>
        <content type="html"><![CDATA[<h2 id="1element-ui-引言">1.Element UI 引言</h2>
<p>官网: https://element.eleme.io/#/zh-CN</p>
<h3 id="11-官方定义">1.1 官方定义</h3>
<p><code>网站快速成型工具</code> 和 <code>桌面端组件库</code></p>
<h3 id="12-定义">1.2 定义</h3>
<p>element ui 就是基于vue的一个ui框架,该框架基于vue开发了很多相关组件,方便我们快速开发页面。</p>
<h3 id="13-由来">1.3 由来</h3>
<p>饿了么前端团队 基于vue进行开发并且进行了开源  element ui 中提供全部都是封装好组件。</p>
<hr>
<h2 id="2安装element-ui">2.安装Element UI</h2>
<h3 id="21通过vue脚手架创建项目">2.1通过vue脚手架创建项目</h3>
<pre><code class="language-js">vue init webpack element(项目名)
</code></pre>
<h3 id="22在vue脚手架项目中安装elementui">2.2在vue脚手架项目中安装elementui</h3>
<pre><code class="language-markdown"># 1.下载elementui的依赖
	npm i element-ui -S

# 2.指定当前项目中使用elementui
	import ElementUI from 'element-ui';
	import 'element-ui/lib/theme-chalk/index.css';

  //在vue脚手架中使用elementui
	Vue.use(ElementUI);
</code></pre>
<hr>
<h2 id="3按钮组件示例">3.按钮组件(示例)</h2>
<figure data-type="image" tabindex="1"><img src="https://Tyloo-code.github.io/post-images/1606970899616.png" alt="image-20200503155535505" loading="lazy"></figure>
<h4 id="31-默认样式按钮">3.1 默认样式按钮</h4>
<pre><code class="language-html">&lt;el-row&gt;
  &lt;el-button&gt;默认按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;success&quot;&gt;成功按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;info&quot;&gt;信息按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;warning&quot;&gt;警告按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;danger&quot;&gt;危险按钮&lt;/el-button&gt;
&lt;/el-row&gt;
</code></pre>
<h4 id="32-简洁按钮">3.2 简洁按钮</h4>
<pre><code class="language-html">&lt;el-row&gt;
  &lt;el-button plain&gt;朴素按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;primary&quot; plain&gt;主要按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;success&quot; plain&gt;成功按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;info&quot; plain&gt;信息按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;warning&quot; plain&gt;警告按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;danger&quot; plain&gt;危险按钮&lt;/el-button&gt;
&lt;/el-row&gt;
</code></pre>
<h4 id="33-圆角按钮">3.3 圆角按钮</h4>
<pre><code class="language-html">&lt;el-row&gt;
  &lt;el-button round&gt;圆角按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;primary&quot; round&gt;主要按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;success&quot; round&gt;成功按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;info&quot; round&gt;信息按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;warning&quot; round&gt;警告按钮&lt;/el-button&gt;
  &lt;el-button type=&quot;danger&quot; round&gt;危险按钮&lt;/el-button&gt;
&lt;/el-row&gt;
</code></pre>
<h4 id="34-图标按钮">3.4 图标按钮</h4>
<pre><code class="language-html">&lt;el-row&gt;
  &lt;el-button icon=&quot;el-icon-search&quot; circle&gt;&lt;/el-button&gt;
  &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; circle&gt;&lt;/el-button&gt;
  &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-check&quot; circle&gt;&lt;/el-button&gt;
  &lt;el-button type=&quot;info&quot; icon=&quot;el-icon-message&quot; circle&gt;&lt;/el-button&gt;
  &lt;el-button type=&quot;warning&quot; icon=&quot;el-icon-star-off&quot; circle&gt;&lt;/el-button&gt;
  &lt;el-button type=&quot;danger&quot; icon=&quot;el-icon-delete&quot; circle&gt;&lt;/el-button&gt;
&lt;/el-row&gt;
</code></pre>
<hr>
<h2 id="4按钮组件的详细使用">4.按钮组件的详细使用</h2>
<p><code>总结:日后使用element ui的相关组件时需要注意的是 所有组件都是el-组件名称开头</code></p>
<h3 id="41创建按钮">4.1创建按钮</h3>
<pre><code class="language-html">&lt;el-button&gt;默认按钮&lt;/el-button&gt;
</code></pre>
<h3 id="42-按钮属性使用">4.2 按钮属性使用</h3>
<pre><code class="language-html">&lt;el-button type=&quot;primary&quot; 属性名=属性值&gt;默认按钮&lt;/el-button&gt;
&lt;el-button type=&quot;success&quot; size=&quot;medium&quot; plain=true round circle icon=&quot;el-icon-loading&quot;&gt;&lt;/el-button&gt;
</code></pre>
<p><code>总结:在elementui中所有组件的属性全部写在组件标签上</code></p>
<h3 id="43-按钮组使用">4.3 按钮组使用</h3>
<pre><code class="language-html">&lt;el-button-group&gt;
  &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-back&quot;&gt;上一页&lt;/el-button&gt;
  &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-right&quot;&gt;下一页&lt;/el-button&gt;
&lt;/el-button-group&gt;
</code></pre>
<p><code>注意:</code></p>
<ul>
<li>在element ui中所有组件都是 <code>el-组件名称</code> 方式进行命名</li>
<li>在element ui中组件的属性使用<code>都是直接将属性名=属性值方式写在对应的组件标签上</code></li>
</ul>
<hr>
<h2 id="5link-文字链接组件">5.Link 文字链接组件</h2>
<h3 id="51-文字链接组件的创建">5.1 文字链接组件的创建</h3>
<pre><code class="language-html">&lt;el-link&gt;默认链接&lt;/el-link&gt;
</code></pre>
<h3 id="52-文字链接组件的属性的使用">5.2 文字链接组件的属性的使用</h3>
<pre><code class="language-html">&lt;el-link  target=&quot;_blank&quot; href=&quot;http://www.baidu.com&quot; &gt;默认链接&lt;/el-link&gt;
&lt;el-link type=&quot;primary&quot;:underline=&quot;false&quot;&gt;默认链接&lt;/el-link&gt;
&lt;el-link type=&quot;success&quot; disabled&gt;默认链接&lt;/el-link&gt;
&lt;el-link type=&quot;info&quot; icon=&quot;el-icon-platform-eleme&quot;&gt;默认链接&lt;/el-link&gt;
&lt;el-link type=&quot;warning&quot;&gt;默认链接&lt;/el-link&gt;
&lt;el-link type=&quot;danger&quot;&gt;默认链接&lt;/el-link&gt;
</code></pre>
<hr>
<h2 id="6layout-栅格布局组件的使用">6.Layout (栅格)布局组件的使用</h2>
<p><code>通过基础的 24 分栏，迅速简便地创建布局</code></p>
<p><code>在element ui中布局组件将页面划分为多个行row,每行最多分为24栏(列)</code></p>
<h3 id="61-使用layout组件">6.1 使用Layout组件</h3>
<pre><code class="language-html">&lt;el-row&gt;
	&lt;el-col :span=&quot;8&quot;&gt;占用8份&lt;/el-col&gt;
  &lt;el-col :span=&quot;8&quot;&gt;占用8份&lt;/el-col&gt;
  &lt;el-col :span=&quot;8&quot;&gt;占用8份&lt;/el-col&gt;
&lt;/el-row&gt;
</code></pre>
<p><code>注意:</code></p>
<ul>
<li>在一个布局组件中 是由 <code>row</code> 和 <code>col</code> 组合而成</li>
<li>在使用时要区分 <code>row属性</code> 和 <code>col属性</code></li>
</ul>
<h3 id="62-属性的使用">6.2 属性的使用</h3>
<ul>
<li>
<p>行属性使用</p>
<pre><code class="language-html">&lt;el-row :gutter=&quot;50&quot; tag=&quot;span&quot;&gt;
  &lt;el-col :span=&quot;4&quot;&gt;&lt;div style=&quot;border: 1px red solid;&quot;&gt;占用4份&lt;/div&gt;&lt;/el-col&gt;
  &lt;el-col :span=&quot;8&quot;&gt;&lt;div style=&quot;border: 1px red solid;&quot;&gt;占用8份&lt;/div&gt;&lt;/el-col&gt;
  &lt;el-col :span=&quot;3&quot;&gt;&lt;div style=&quot;border: 1px red solid;&quot;&gt;占用3份&lt;/div&gt;&lt;/el-col&gt;
  &lt;el-col :span=&quot;9&quot;&gt;&lt;div style=&quot;border: 1px red solid;&quot;&gt;占用9份&lt;/div&gt;&lt;/el-col&gt;
&lt;/el-row&gt;
</code></pre>
</li>
<li>
<p>列属性的使用</p>
<pre><code class="language-html">&lt;el-row&gt;
  &lt;el-col :span=&quot;12&quot; :offset=&quot;9&quot; :psuh=&quot;3&quot; xs&gt;&lt;div style=&quot;border: 1px blue solid;&quot;&gt;我是占用12分&lt;/div&gt;&lt;/el-col&gt;
  &lt;el-col :span=&quot;6&quot;&gt;&lt;div style=&quot;border: 1px blue solid;&quot;&gt;我是占用6分&lt;/div&gt;&lt;/el-col&gt;
&lt;/el-row&gt;
</code></pre>
</li>
</ul>
<hr>
<h2 id="7container-布局容器组件">7.Container 布局容器组件</h2>
<h3 id="71-创建布局容器">7.1 创建布局容器</h3>
<pre><code class="language-html">&lt;el-container&gt;
	
&lt;/el-container&gt;
</code></pre>
<h3 id="72-容器中包含的子元素">7.2 容器中包含的子元素</h3>
<pre><code class="language-html">&lt;el-header&gt;：顶栏容器。
&lt;el-aside&gt;：侧边栏容器。
&lt;el-main&gt;：主要区域容器。
&lt;el-footer&gt;：底栏容器。
</code></pre>
<h3 id="73-容器的嵌套使用">7.3 容器的嵌套使用</h3>
<pre><code class="language-html">&lt;!--创建容器--&gt;
&lt;el-container&gt;
  &lt;!--header--&gt;
  &lt;el-header&gt;&lt;div&gt;&lt;h1&gt;我是标题&lt;/h1&gt;&lt;/div&gt;&lt;/el-header&gt;
  &lt;!--容器嵌套使用--&gt;
  &lt;el-container&gt;
    &lt;!--aside--&gt;
    &lt;el-aside&gt;&lt;div&gt;&lt;h1&gt;我是菜单&lt;/h1&gt;&lt;/div&gt;&lt;/el-aside&gt;
    &lt;!--main--&gt;
    &lt;el-main&gt;&lt;div&gt;&lt;h1&gt;我是中心内容&lt;/h1&gt;&lt;/div&gt;&lt;/el-main&gt;
  &lt;/el-container&gt;
  &lt;el-footer&gt;&lt;div&gt;&lt;h1&gt;我是页脚&lt;/h1&gt;&lt;/div&gt;&lt;/el-footer&gt;
&lt;/el-container&gt;
</code></pre>
<h3 id="74-水平容器">7.4 水平容器</h3>
<pre><code class="language-html">&lt;el-container direction=&quot;horizontal&quot;&gt;
  &lt;!--header--&gt;
  &lt;el-header&gt;&lt;div&gt;&lt;h1&gt;我是标题&lt;/h1&gt;&lt;/div&gt;&lt;/el-header&gt;
  &lt;el-container&gt;
    &lt;!--aside--&gt;
    &lt;el-aside&gt;&lt;div&gt;&lt;h1&gt;我是菜单&lt;/h1&gt;&lt;/div&gt;&lt;/el-aside&gt;
    &lt;!--main--&gt;
    &lt;el-main&gt;&lt;div&gt;&lt;h1&gt;我是中心内容&lt;/h1&gt;&lt;/div&gt;&lt;/el-main&gt;
  &lt;/el-container&gt;
  &lt;el-footer&gt;&lt;div&gt;&lt;h1&gt;我是页脚&lt;/h1&gt;&lt;/div&gt;&lt;/el-footer&gt;
&lt;/el-container&gt;
</code></pre>
<p><code>注意:当子元素中没有有 el-header 或 el-footer 时容器排列为水平</code></p>
<h3 id="75-垂直容器">7.5 垂直容器</h3>
<pre><code class="language-html">&lt;el-container direction=&quot;vertical&quot;&gt;
  &lt;!--header--&gt;
  &lt;el-header&gt;&lt;div&gt;&lt;h1&gt;我是标题&lt;/h1&gt;&lt;/div&gt;&lt;/el-header&gt;
  &lt;el-container&gt;
    &lt;!--aside--&gt;
    &lt;el-aside&gt;&lt;div&gt;&lt;h1&gt;我是菜单&lt;/h1&gt;&lt;/div&gt;&lt;/el-aside&gt;
    &lt;!--main--&gt;
    &lt;el-main&gt;&lt;div&gt;&lt;h1&gt;我是中心内容&lt;/h1&gt;&lt;/div&gt;&lt;/el-main&gt;
  &lt;/el-container&gt;
  &lt;!--footer--&gt;
  &lt;el-footer&gt;&lt;div&gt;&lt;h1&gt;我是页脚&lt;/h1&gt;&lt;/div&gt;&lt;/el-footer&gt;
&lt;/el-container&gt;
</code></pre>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[餐厅练习-Css选择器]]></title>
        <id>https://Tyloo-code.github.io/post/can-ting-lian-xi-css-xuan-ze-qi/</id>
        <link href="https://Tyloo-code.github.io/post/can-ting-lian-xi-css-xuan-ze-qi/">
        </link>
        <updated>2020-12-01T02:33:21.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue从入门到未完待续]]></title>
        <id>https://Tyloo-code.github.io/post/vue-cong-ru-men-dao-wei-wan-dai-xu/</id>
        <link href="https://Tyloo-code.github.io/post/vue-cong-ru-men-dao-wei-wan-dai-xu/">
        </link>
        <updated>2020-11-30T08:50:39.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows系统下Typora 完全使用详解]]></title>
        <id>https://Tyloo-code.github.io/post/windows-xi-tong-xia-typora-wan-quan-shi-yong-xiang-jie/</id>
        <link href="https://Tyloo-code.github.io/post/windows-xi-tong-xia-typora-wan-quan-shi-yong-xiang-jie/">
        </link>
        <updated>2020-11-30T05:40:48.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown基本语法]]></title>
        <id>https://Tyloo-code.github.io/post/markdown-ji-ben-yu-fa/</id>
        <link href="https://Tyloo-code.github.io/post/markdown-ji-ben-yu-fa/">
        </link>
        <updated>2020-11-30T02:09:55.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[HelloWorld]]></title>
        <id>https://Tyloo-code.github.io/post/helloworld/</id>
        <link href="https://Tyloo-code.github.io/post/helloworld/">
        </link>
        <updated>2020-11-29T14:23:07.000Z</updated>
        <summary type="html"><![CDATA[<p>与Gridea的初次邂逅!😘<br>
<img src="https://Tyloo-code.github.io/post-images/1606659885219.jpg" alt="" loading="lazy"></p>
]]></summary>
        <content type="html"><![CDATA[<p>与Gridea的初次邂逅!😘<br>
<img src="https://Tyloo-code.github.io/post-images/1606659885219.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>